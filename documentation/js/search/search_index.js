var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.85,1,2.388]],["body/guards/AccessTokenGuard.html",[1,2.925,2,2.439,3,0.159,4,0.141,5,0.141,6,4.988,7,4.05,8,2.733,9,0.216,10,1.006,11,1.425,12,5.278,13,1.569,14,4.551,15,1.163,16,2.439,17,4.591,18,3.73,19,3.73,20,0.536,21,3.18,22,1.234,23,0.019,24,1.175,25,0.468,26,1.065,27,2.733,28,4.05,29,3.18,30,3.491,31,1.006,32,2.537,33,4.551,34,4.9,35,3.18,36,0.435,37,1.479,38,0.459,39,2.044,40,0.518,41,1.566,42,1.773,43,2.733,44,1.773,45,2.733,46,2.439,47,3.18,48,0.159,49,0.074,50,2.044,51,1.22,52,1.109,53,2.044,54,2.184,55,3.18,56,3.173,57,3.18,58,1.898,59,1.802,60,3.18,61,2.219,62,1.326,63,3.491,64,1.138,65,3.18,66,3.18,67,2.733,68,1.175,69,1.898,70,1.326,71,1.898,72,3.18,73,3.18,74,3.18,75,4.551,76,3.18,77,3.18,78,3.18,79,3.18,80,1.898,81,0.011,82,0.011]],["title/controllers/AppController.html",[83,1.398,84,2.593]],["body/controllers/AppController.html",[3,0.267,4,0.237,5,0.237,23,0.018,36,0.436,40,0.869,48,0.267,49,0.124,52,1.299,81,0.016,82,0.016,83,2.408,84,4.467,85,2.346,86,4.583,87,4.093,88,4.583,89,5.332]],["title/modules/AppModule.html",[90,1.83,91,2.593]],["body/modules/AppModule.html",[1,2.887,3,0.156,4,0.139,5,0.139,7,2.178,23,0.019,25,0.252,36,0.496,37,1.451,40,0.509,41,1.537,42,1.74,44,1.74,48,0.156,49,0.072,69,2.68,81,0.011,82,0.011,84,3.672,85,1.976,87,3.789,88,2.683,90,2.591,91,4.942,92,1.74,93,1.74,94,2.006,95,2.006,96,1.74,97,3.381,98,2.006,99,2.683,100,2.683,101,2.683,102,3.789,103,4.081,104,3.539,105,2.887,106,2.006,107,2.006,108,3.121,109,3.672,110,3.121,111,3.121,112,1.74,113,1.863,114,3.121,115,3.121,116,2.394,117,1.302,118,3.86,119,4.016,120,4.491,121,3.121,122,4.491,123,3.121,124,3.121,125,2.683,126,4.491,127,4.491,128,2.394,129,3.121,130,2.683,131,3.134,132,3.121,133,3.134,134,3.121,135,3.121,136,3.121,137,3.121,138,3.121,139,3.121,140,3.121,141,3.121,142,3.121,143,3.121,144,3.121,145,3.121,146,3.121,147,3.121,148,1.74,149,3.121,150,1.74,151,3.121,152,2.394,153,3.121,154,3.121,155,3.121,156,3.121,157,3.121,158,3.121,159,2.683,160,2.683,161,3.86,162,3.86]],["title/injectables/AppService.html",[38,0.375,87,2.217]],["body/injectables/AppService.html",[3,0.26,4,0.23,5,0.23,9,0.353,10,1.392,20,0.523,23,0.018,31,1.147,36,0.353,38,0.635,40,0.846,48,0.26,49,0.12,68,1.147,81,0.015,82,0.015,87,3.758,163,1.53,164,4.46,165,7.047,166,5.189,167,1.461,168,5.189,169,3.98]],["title/injectables/Argon2Provider.html",[38,0.375,170,2.593]],["body/injectables/Argon2Provider.html",[3,0.207,4,0.183,5,0.183,9,0.281,10,1.205,11,1.855,20,0.549,22,1.265,23,0.019,24,1.205,25,0.44,26,1.092,31,1.205,32,3.614,36,0.415,38,0.549,40,0.673,48,0.207,49,0.096,50,2.654,68,1.205,81,0.013,82,0.013,150,3.399,163,1.218,167,1.682,170,3.802,171,3.55,172,4.683,173,4.683,174,5.448,175,5.949,176,5.24,177,4.129,178,5.448,179,4.129,180,2.85,181,3.55,182,4.683,183,4.129,184,4.129]],["title/controllers/AuthController.html",[83,1.398,185,2.593]],["body/controllers/AuthController.html",[3,0.189,4,0.167,5,0.167,9,0.256,10,1.132,11,1.806,13,0.961,15,0.961,20,0.516,22,1.188,23,0.019,24,1.132,25,0.413,26,1.026,31,1.132,36,0.459,40,0.613,48,0.189,49,0.087,51,1.008,52,0.916,68,1.132,81,0.012,82,0.012,83,1.416,85,1.656,185,3.573,186,3.234,187,2.419,188,3.043,189,3.926,190,3.926,191,2.886,192,4.021,193,1.662,194,5.118,195,3.762,196,3.762,197,1.662,198,2.886,199,4.021,200,5.118,201,3.762,202,3.762,203,2.419,204,3.762,205,3.762,206,2.246,207,3.243,208,3.234,209,2.886,210,3.234,211,2.246,212,2.886,213,2.626,214,2.886,215,2.098,216,3.762,217,2.886,218,5.118,219,3.926,220,3.762,221,3.762,222,2.886,223,3.762,224,3.762]],["title/modules/AuthModule.html",[90,1.83,102,2.217]],["body/modules/AuthModule.html",[3,0.158,4,0.14,5,0.14,23,0.019,36,0.497,40,0.512,41,1.548,42,1.752,44,1.752,48,0.158,49,0.073,81,0.011,82,0.011,85,1.986,90,2.601,92,1.752,93,1.752,94,2.02,95,2.02,96,1.752,97,3.395,98,3.395,102,4.399,104,2.516,105,2.901,106,2.02,107,2.02,109,2.194,118,2.701,125,2.701,159,2.701,160,2.701,161,2.701,162,2.701,170,3.15,180,3.508,185,3.686,207,3.953,208,2.701,225,2.701,226,2.701,227,2.701,228,3.798,229,3.134,230,3.798,231,3.798,232,3.798,233,3.143,234,3.686,235,3.686,236,2.223,237,3.143,238,2.701,239,3.143,240,3.143,241,3.143,242,2.701,243,2.194,244,3.143,245,2.694,246,3.143,247,3.143,248,4.513,249,3.143,250,3.462,251,3.143,252,3.143]],["title/injectables/AuthService.html",[38,0.375,207,2.071]],["body/injectables/AuthService.html",[3,0.178,4,0.157,5,0.157,9,0.241,10,1.087,11,1.512,13,1.441,15,1.256,20,0.569,22,1.309,23,0.019,24,1.247,25,0.455,26,1.13,31,1.087,36,0.45,37,1.649,38,0.495,40,0.578,48,0.178,49,0.082,51,1.512,52,1.374,68,1.087,81,0.012,82,0.012,163,1.046,189,3.77,190,3.77,191,3.77,192,3.817,197,1.151,198,3.77,199,3.817,207,2.74,209,2.72,214,2.72,215,1.977,231,4.128,232,4.128,236,1.747,242,3.048,245,2.116,253,3.048,254,2.255,255,2.475,256,2.885,257,3.546,258,3.546,259,3.546,260,2.116,261,3.546,262,3.048,263,1.977,264,3.546,265,3.546]],["title/guards/AuthenticationGuard.html",[0,2.85,131,2.593]],["body/guards/AuthenticationGuard.html",[1,4.335,2,4.099,3,0.161,4,0.142,5,0.142,7,2.24,9,0.218,10,1.013,11,1.432,12,5.797,13,1.637,15,1.171,20,0.462,22,1.064,23,0.019,24,1.013,25,0.37,26,0.918,27,2.759,28,4.067,30,3.515,31,0.71,32,2.555,36,0.436,38,0.462,39,2.063,40,0.523,48,0.161,49,0.106,50,2.063,51,1.228,52,1.561,54,2.193,58,1.339,59,1.271,62,1.339,64,1.149,68,0.71,69,2.735,70,1.339,71,1.911,81,0.011,82,0.011,128,2.462,130,2.759,131,3.198,197,1.042,211,1.916,212,2.462,213,2.24,266,2.759,267,0.946,268,4.582,269,4.582,270,3.21,271,6.596,272,3.21,273,3.21,274,2.759,275,2.462,276,4.582,277,2.462,278,3.21,279,4.582,280,3.21,281,2.759,282,3.21,283,3.21,284,3.21,285,2.759,286,3.21,287,3.21,288,3.21,289,3.21,290,3.21,291,3.21,292,5.343,293,3.21,294,3.21,295,3.21,296,2.24]],["title/injectables/CreateFacebookUserProvider.html",[38,0.375,297,2.217]],["body/injectables/CreateFacebookUserProvider.html",[3,0.192,4,0.17,5,0.17,9,0.261,10,1.147,11,1.575,13,0.98,15,1.325,20,0.523,22,1.204,23,0.019,24,1.147,25,0.419,26,1.039,31,0.848,36,0.461,38,0.523,40,0.626,48,0.192,49,0.089,51,1.028,52,0.935,54,1.444,58,1.601,59,1.519,62,1.601,64,1.374,68,0.848,70,1.601,71,2.164,81,0.013,82,0.013,117,1.601,163,1.131,197,1.246,254,2.003,297,3.096,298,4.101,299,2.733,300,2.678,301,4.459,302,2.29,303,3.293,304,3.298,305,3.276,306,4.459,307,4.227,308,3.298,309,2.678,310,1.237,311,2.007,312,1.688,313,2.007,314,3.298,315,2.467,316,3.837,317,2.139,318,3.837,319,2.943,320,3.298,321,1.444,322,2.29]],["title/injectables/CreateGoogleUserProvider.html",[38,0.375,323,2.217]],["body/injectables/CreateGoogleUserProvider.html",[3,0.195,4,0.173,5,0.173,9,0.265,10,1.158,11,1.586,13,0.995,15,1.338,20,0.528,22,1.216,23,0.019,24,1.158,25,0.423,26,1.049,31,0.861,36,0.45,38,0.528,40,0.635,48,0.195,49,0.09,51,1.043,52,0.948,54,1.465,58,1.624,59,1.541,62,1.624,64,1.393,68,0.861,70,1.624,71,1.624,81,0.013,82,0.013,117,1.624,163,1.148,197,1.263,254,2.017,298,4.131,300,2.717,302,2.323,303,3.312,305,3.3,308,3.346,309,2.717,310,1.246,311,2.036,312,1.713,313,2.036,315,2.502,317,2.17,319,2.986,320,3.346,321,1.465,322,2.323,323,3.126,324,2.753,325,4.502,326,3.892,327,4.502,328,4.247,329,3.346,330,3.892]],["title/classes/CreateUserDto.html",[49,0.086,331,2.071]],["body/classes/CreateUserDto.html",[3,0.179,4,0.159,5,0.159,9,0.243,20,0.616,23,0.018,25,0.535,26,0.99,36,0.416,48,0.179,49,0.131,81,0.012,82,0.012,148,3.158,150,3.576,167,1.54,193,1.983,267,1.457,310,0.752,331,2.755,332,1.279,333,5.513,334,2.494,335,2.242,336,4.344,337,3.574,338,3.574,339,3.574,340,6.11,341,4.941,342,4.941,343,3.176,344,4.247,345,4.941,346,4.941,347,4.941,348,2.767,349,4.941,350,3.449,351,4.941,352,4.941,353,3.574,354,3.647,355,3.574,356,3.574,357,3.574,358,3.574,359,4.247,360,3.647,361,4.247,362,3.158,363,3.574,364,3.072,365,4.941,366,1.573,367,2.297,368,2.741,369,3.009,370,3.79,371,1.345,372,3.574,373,3.574,374,3.574]],["title/injectables/CreateUserProvider.html",[38,0.375,375,2.217]],["body/injectables/CreateUserProvider.html",[3,0.166,4,0.147,5,0.147,9,0.225,10,1.036,11,1.457,13,1.197,15,1.197,20,0.472,22,1.087,23,0.019,24,1.036,25,0.378,26,0.939,31,0.732,32,2.612,36,0.441,37,1.54,38,0.472,40,0.54,48,0.166,49,0.077,51,1.256,52,1.141,54,1.246,58,2.268,59,1.855,62,1.381,64,1.946,68,0.732,70,1.381,71,2.465,81,0.011,82,0.011,117,1.381,150,1.846,163,0.977,180,3.617,236,1.631,254,1.853,263,1.846,298,3.794,300,2.312,302,1.977,303,3.092,304,2.847,305,3.031,309,3.27,310,1.244,311,1.733,312,1.457,313,1.733,317,1.846,322,2.796,331,3.61,335,1.855,375,2.796,376,4.027,377,4.027,378,3.312,379,2.129,380,2.54,381,2.129,382,3.312,383,4.685,384,2.54,385,3.312,386,3.312,387,3.312,388,3.312,389,5.436,390,3.312,391,3.312,392,3.312,393,2.312,394,2.312,395,2.312,396,2.312,397,2.847,398,2.312]],["title/interfaces/CurrentUser.html",[399,2.593,400,2.217]],["body/interfaces/CurrentUser.html",[3,0.256,4,0.227,5,0.227,9,0.348,23,0.018,25,0.503,48,0.256,81,0.015,82,0.015,167,1.698,267,1.839,310,1.313,335,2.847,399,3.567,400,3.723,401,5.111,402,3.92,403,3.567,404,4.894,405,2.674]],["title/injectables/DataResponseInterceptor.html",[38,0.375,133,2.593]],["body/injectables/DataResponseInterceptor.html",[3,0.211,4,0.187,5,0.187,9,0.287,10,1.222,13,1.078,15,1.412,20,0.557,22,1.283,23,0.019,24,1.222,25,0.446,26,1.107,28,4.563,30,3.237,31,0.933,36,0.419,38,0.557,40,0.688,41,2.078,48,0.211,49,0.098,50,2.712,52,1.028,68,0.933,81,0.013,82,0.013,119,4.86,133,3.857,163,1.244,274,5.296,275,3.237,406,5.296,407,3.627,408,5.526,409,4.219,410,4.219,411,5.526,412,6.161,413,6.537,414,4.219,415,5.526,416,4.219,417,4.219,418,4.219,419,4.219,420,3.857]],["title/controllers/FacebookAuthenticationController.html",[83,1.398,235,2.593]],["body/controllers/FacebookAuthenticationController.html",[3,0.218,4,0.193,5,0.193,9,0.295,10,1.245,11,1.674,13,1.109,15,1.109,20,0.438,22,1.008,23,0.019,24,0.96,25,0.35,26,0.87,31,0.96,36,0.425,40,0.708,48,0.218,49,0.101,51,1.164,52,1.057,68,0.96,81,0.014,82,0.014,83,1.634,85,1.91,187,2.791,193,1.409,197,1.409,203,2.791,206,3.728,215,2.42,228,3.945,235,3.929,250,3.33,254,2.129,299,2.019,421,4.838,422,3.33,423,4.318,424,3.36,425,3.732,426,4.51,427,4.341,428,4.341,429,3.732,430,4.341,431,3.732,432,4.341]],["title/injectables/FacebookAuthenticationService.html",[38,0.375,228,2.217]],["body/injectables/FacebookAuthenticationService.html",[3,0.161,4,0.142,5,0.142,9,0.218,10,1.013,11,1.432,13,1.171,15,1.171,20,0.462,22,1.064,23,0.019,24,1.182,25,0.37,26,0.918,31,0.71,36,0.419,37,1.493,38,0.462,40,0.523,48,0.161,49,0.074,51,1.228,52,1.116,54,1.724,56,3.189,58,1.911,59,1.814,61,2.24,62,1.339,64,1.913,68,1.182,70,1.339,71,1.339,81,0.011,82,0.011,148,2.555,152,2.462,163,0.946,197,1.042,215,1.79,222,2.462,228,2.735,229,3.322,236,1.581,245,1.916,254,1.821,255,2.24,256,2.813,260,1.916,263,1.79,299,2.485,310,1.349,322,1.916,335,2.116,405,1.679,420,3.198,424,2.735,425,3.938,426,3.961,429,2.759,433,4.593,434,2.462,435,3.21,436,3.21,437,2.24,438,3.938,439,2.24,440,2.759,441,2.759,442,3.21,443,3.21,444,3.746,445,2.945,446,3.938,447,2.24,448,2.759,449,1.916,450,2.462,451,3.21,452,3.21,453,3.21,454,2.462,455,2.24,456,2.759]],["title/classes/FacebookTokenDto.html",[49,0.086,426,2.388]],["body/classes/FacebookTokenDto.html",[3,0.242,4,0.214,5,0.214,9,0.328,20,0.486,23,0.018,25,0.389,36,0.409,48,0.242,49,0.139,56,3.915,81,0.015,82,0.015,167,1.397,193,1.565,267,1.774,299,2.798,310,1.267,321,1.814,332,1.725,360,3.591,362,3.354,366,2.121,369,2.963,371,1.814,424,3.591,426,3.867,457,5.171,458,3.364,459,2.522,460,5.171,461,4.143,462,4.143,463,3.697]],["title/classes/FacebookUser.html",[49,0.086,307,2.388]],["body/classes/FacebookUser.html",[3,0.242,4,0.214,5,0.214,9,0.328,20,0.693,23,0.018,25,0.554,48,0.242,49,0.112,81,0.015,82,0.015,148,3.657,167,1.716,267,1.774,307,3.867,332,1.725,335,2.597,403,3.364,444,4.216,445,4.216,464,6.076,465,4.143,466,4.143,467,4.143,468,4.143]],["title/injectables/FindOneUserByEmailProvider.html",[38,0.375,469,2.217]],["body/injectables/FindOneUserByEmailProvider.html",[3,0.183,4,0.163,5,0.163,9,0.249,10,1.111,11,1.537,13,0.935,15,1.284,20,0.506,22,1.166,23,0.019,24,1.111,25,0.405,26,1.007,31,0.809,32,2.801,36,0.42,38,0.506,39,3.229,40,0.597,48,0.183,49,0.085,51,0.981,52,0.892,54,1.378,58,2.392,59,1.989,62,1.527,64,1.311,68,0.809,70,1.527,71,2.575,81,0.012,82,0.012,117,1.527,163,1.079,167,1.331,254,1.955,302,2.185,303,3.229,305,3.198,310,1.489,311,1.915,312,1.611,313,1.915,317,2.041,335,1.989,348,2.392,379,2.353,384,2.808,393,2.555,394,2.555,395,2.555,396,2.555,398,2.555,449,2.185,469,2.999,470,4.003,471,3.147,472,5.024,473,3.661,474,5.024,475,3.661,476,3.147,477,3.147,478,2.808,479,2.808]],["title/injectables/FindOneUserByFacebookIdProvider.html",[38,0.375,480,2.217]],["body/injectables/FindOneUserByFacebookIdProvider.html",[3,0.206,4,0.183,5,0.183,9,0.28,10,1.202,11,1.632,13,1.052,15,1.389,20,0.548,22,1.262,23,0.019,24,1.202,25,0.439,26,1.089,31,0.91,36,0.441,38,0.548,40,0.671,48,0.206,49,0.095,51,1.103,52,1.003,68,0.91,81,0.013,82,0.013,117,1.717,163,1.214,167,1.413,197,1.336,254,2.075,299,2.831,302,2.457,303,3.387,305,3.394,310,1.363,311,2.154,312,1.812,313,2.154,317,2.295,348,2.539,444,3.495,470,4.249,480,3.245,481,3.158,482,5.437,483,3.539,484,5.437,485,3.539,486,3.539]],["title/injectables/FindOneUserByGoogleIdProvider.html",[38,0.375,487,2.217]],["body/injectables/FindOneUserByGoogleIdProvider.html",[3,0.205,4,0.182,5,0.182,9,0.278,10,1.197,11,1.627,13,1.046,15,1.384,20,0.546,22,1.257,23,0.019,24,1.197,25,0.437,26,1.085,31,0.905,36,0.44,38,0.546,40,0.667,48,0.205,49,0.095,51,1.097,52,0.997,64,1.465,68,0.905,81,0.013,82,0.013,117,1.707,163,1.207,167,1.409,197,1.328,254,2.068,302,2.442,303,3.515,305,3.019,310,1.36,311,2.141,312,1.801,313,2.141,317,2.282,324,2.823,348,2.532,470,4.236,481,3.139,483,3.517,485,3.517,486,3.517,487,3.232,488,4.655,489,4.655,490,3.481,491,2.856]],["title/injectables/GenerateTokensProvider.html",[38,0.375,229,1.83]],["body/injectables/GenerateTokensProvider.html",[3,0.156,4,0.138,5,0.138,9,0.211,10,0.99,11,1.699,13,1.341,15,1.144,16,2.383,17,4.559,18,3.69,19,3.69,20,0.529,22,1.333,23,0.019,24,1.16,25,0.491,26,1.051,31,0.99,36,0.431,37,1.445,38,0.451,40,0.507,41,1.53,42,1.732,44,1.732,48,0.156,49,0.072,51,1.406,52,1.278,53,1.997,54,1.169,63,4.404,64,1.602,68,0.99,81,0.011,82,0.011,119,4.559,163,0.916,167,1.218,197,1.453,229,2.205,243,2.168,254,2.16,310,1.281,315,1.997,335,1.23,350,3.662,400,1.854,404,2.168,439,4.007,492,2.383,493,4.476,494,4.476,495,3.107,496,4.476,497,3.107,498,4.476,499,5.741,500,5.741,501,3.107,502,3.847,503,3.107,504,2.67,505,3.107,506,2.67,507,3.107,508,2.383,509,2.67,510,2.67,511,2.67,512,2.67,513,2.67,514,4.476,515,3.847,516,3.107,517,3.107,518,3.107,519,3.107,520,3.107,521,3.107]],["title/classes/GetAllUsersParamDto.html",[49,0.086,522,2.388]],["body/classes/GetAllUsersParamDto.html",[3,0.208,4,0.184,5,0.184,9,0.283,20,0.551,23,0.018,25,0.441,26,1.302,36,0.372,48,0.208,49,0.127,80,3.65,81,0.013,82,0.013,193,1.776,267,1.613,321,2.058,332,1.487,350,4.839,361,5.256,366,1.828,370,4.691,371,1.564,522,3.516,523,4.268,524,3.571,525,5.256,526,6.075,527,4.839,528,3.516,529,5.256,530,5.47,531,5.47,532,4.702,533,4.155,534,4.155,535,4.155,536,4.155,537,6.115,538,3.571,539,5.47]],["title/classes/GetOneUserParamDto.html",[49,0.086,540,2.217]],["body/classes/GetOneUserParamDto.html",[3,0.247,4,0.219,5,0.219,9,0.335,20,0.497,23,0.018,25,0.397,36,0.415,48,0.247,49,0.141,81,0.015,82,0.015,167,1.607,193,1.599,267,1.798,321,1.853,332,1.763,334,3.438,348,2.543,366,2.167,369,3.003,371,1.853,405,3.465,459,2.577,523,4.256,540,3.64,541,4.925,542,4.925,543,6.098,544,3.778]],["title/controllers/GoogleAuthenticationController.html",[83,1.398,234,2.593]],["body/controllers/GoogleAuthenticationController.html",[3,0.209,4,0.185,5,0.185,9,0.284,10,1.212,11,1.641,13,1.065,15,1.065,20,0.42,22,0.967,23,0.019,24,0.922,25,0.336,26,0.835,31,0.922,36,0.46,40,0.679,48,0.209,49,0.097,51,1.117,52,1.015,64,1.492,68,0.922,81,0.013,82,0.013,83,1.568,85,1.834,187,2.679,188,2.18,193,1.353,197,1.353,203,2.679,206,3.655,210,3.582,211,2.488,212,3.197,213,2.909,215,2.324,219,3.197,230,3.883,234,3.826,250,3.197,254,2.087,324,1.938,422,3.197,423,4.204,424,3.271,431,3.582,545,4.711,546,3.582,547,4.46,548,4.168,549,4.168,550,3.582,551,4.168,552,4.168]],["title/injectables/GoogleAuthenticationService.html",[38,0.375,230,2.217]],["body/injectables/GoogleAuthenticationService.html",[3,0.135,4,0.12,5,0.12,9,0.184,10,0.892,11,1.296,13,1.54,15,1.031,18,2.594,19,3.449,20,0.541,22,0.937,23,0.019,24,0.892,25,0.433,26,0.809,31,0.892,36,0.425,37,1.255,38,0.407,40,0.44,41,1.329,44,1.504,45,2.319,48,0.135,49,0.063,50,1.735,51,1.296,52,1.178,53,1.735,54,2.019,56,2.409,58,1.683,59,1.914,62,1.126,63,2.07,64,1.731,68,0.892,70,1.126,71,1.126,81,0.01,82,0.01,148,2.696,152,2.07,163,0.796,188,1.412,197,0.876,215,1.504,222,2.07,229,3.164,230,2.409,236,1.329,245,1.611,254,1.648,256,2.74,260,1.611,263,1.504,267,1.19,310,1.209,324,2.671,335,2.125,404,1.883,424,2.409,434,2.07,437,1.883,439,1.883,440,2.319,441,2.319,445,3.108,446,3.469,447,1.883,448,2.319,449,1.611,450,2.07,454,2.07,455,1.883,456,2.319,490,3.693,546,3.469,547,3.693,550,2.319,553,4.938,554,4.835,555,6.028,556,2.698,557,4.036,558,2.698,559,2.698,560,2.698,561,4.835,562,2.319,563,4.036,564,2.698,565,2.698,566,2.698,567,4.036,568,2.698,569,2.698,570,2.698,571,2.698,572,2.698,573,2.698,574,2.698,575,2.698,576,2.698,577,2.698,578,2.698,579,2.698]],["title/classes/GoogleTokenDto.html",[49,0.086,547,2.388]],["body/classes/GoogleTokenDto.html",[3,0.242,4,0.214,5,0.214,9,0.328,20,0.486,23,0.018,25,0.389,36,0.409,48,0.242,49,0.139,56,3.915,81,0.015,82,0.015,167,1.397,193,1.565,267,1.774,310,1.267,321,1.814,324,2.798,332,1.725,360,3.591,362,3.354,366,2.121,369,2.963,371,1.814,424,3.591,458,3.364,459,2.522,460,5.171,461,4.143,462,4.143,463,3.697,547,3.867,580,5.171]],["title/classes/GoogleUser.html",[49,0.086,328,2.388]],["body/classes/GoogleUser.html",[3,0.242,4,0.214,5,0.214,9,0.328,20,0.693,23,0.018,25,0.554,48,0.242,49,0.112,81,0.015,82,0.015,148,3.657,167,1.716,267,1.774,328,3.867,332,1.725,335,2.597,403,3.364,445,4.216,465,4.143,466,4.143,467,4.143,468,4.143,490,4.216,581,6.076]],["title/injectables/HashingProvider.html",[38,0.375,180,1.943]],["body/injectables/HashingProvider.html",[3,0.22,4,0.195,5,0.195,9,0.298,10,1.253,20,0.571,22,1.315,23,0.018,24,1.253,25,0.457,26,1.135,31,1.253,32,3.698,36,0.298,38,0.571,40,0.715,48,0.22,49,0.102,81,0.014,82,0.014,163,1.293,167,1.702,172,4.869,173,4.869,175,6.047,176,5.394,180,2.963,420,3.953,582,3.768,583,7.158,584,5.664,585,4.383,586,5.664,587,4.383]],["title/classes/LinkYoutubeDto.html",[49,0.086,588,2.388]],["body/classes/LinkYoutubeDto.html",[3,0.243,4,0.216,5,0.216,9,0.33,20,0.489,23,0.018,25,0.392,36,0.411,48,0.243,49,0.14,81,0.015,82,0.015,167,1.403,193,1.576,267,1.782,321,1.827,324,2.258,332,1.738,362,3.369,366,2.136,369,2.977,371,1.827,459,2.54,463,4.636,588,3.885,589,2.977,590,5.194,591,4.173,592,7.084,593,6.043,594,4.854,595,4.854]],["title/classes/PatchUserDto.html",[49,0.086,596,2.388]],["body/classes/PatchUserDto.html",[3,0.268,4,0.238,5,0.238,23,0.018,36,0.437,48,0.268,49,0.124,81,0.016,82,0.016,322,3.195,331,2.985,332,1.916,334,3.736,371,2.015,381,3.441,596,4.124,597,4.106,598,5.514,599,6.415,600,4.601]],["title/classes/PatchUserPreferencesDTo.html",[49,0.086,601,2.388]],["body/classes/PatchUserPreferencesDTo.html",[3,0.267,4,0.237,5,0.237,23,0.018,36,0.436,48,0.267,49,0.124,81,0.016,82,0.016,310,1.348,332,1.909,354,3.183,367,3.428,371,2.007,597,4.09,598,5.501,600,4.583,601,4.114,602,4.09,603,6.4]],["title/classes/RefreshTokenDto.html",[49,0.086,192,2.217]],["body/classes/RefreshTokenDto.html",[3,0.242,4,0.214,5,0.214,9,0.328,20,0.486,23,0.018,25,0.389,36,0.409,48,0.242,49,0.139,56,3.591,81,0.015,82,0.015,167,1.397,192,3.591,193,1.565,262,5.171,267,1.774,321,1.814,332,1.725,360,3.591,362,3.354,366,2.121,369,2.963,371,1.814,423,3.697,458,3.364,459,2.522,515,5.638,604,5.171,605,6.016,606,5.171,607,4.82,608,4.82]],["title/injectables/RefreshTokensProvider.html",[38,0.375,231,2.217]],["body/injectables/RefreshTokensProvider.html",[3,0.166,4,0.147,5,0.147,9,0.225,10,1.034,11,1.455,13,1.509,15,1.195,16,2.534,17,4.642,18,3.795,19,3.795,20,0.472,22,1.086,23,0.019,24,1.034,25,0.438,26,0.937,31,0.731,36,0.453,37,1.536,38,0.472,39,2.124,40,0.539,41,1.627,42,1.842,44,1.842,48,0.166,49,0.077,51,1.582,52,1.438,53,2.124,54,1.76,58,1.378,59,1.308,62,1.378,64,1.943,68,0.731,70,1.378,71,1.378,81,0.011,82,0.011,163,0.974,189,3.587,191,3.587,192,3.719,197,1.072,214,2.534,215,1.842,229,3.347,231,2.791,236,1.627,243,2.306,245,1.972,254,1.85,256,2.883,260,1.972,263,1.842,310,0.696,404,2.306,455,2.306,492,2.534,508,2.534,509,2.84,510,2.84,511,2.84,512,2.84,513,2.84,609,4.666,610,3.304,611,3.304,612,2.534,613,3.304,614,3.304,615,3.304]],["title/classes/SelectChannelDto.html",[49,0.086,616,2.388]],["body/classes/SelectChannelDto.html",[3,0.171,4,0.152,5,0.152,9,0.233,20,0.558,23,0.018,24,1.06,25,0.446,36,0.377,48,0.171,49,0.111,81,0.012,82,0.012,112,3.342,167,1.392,169,2.624,193,1.796,267,1.413,321,2.082,332,1.224,343,3.081,348,1.999,360,3.302,362,3.085,366,1.505,369,2.953,371,1.287,459,2.894,528,3.081,544,3.676,589,2.953,616,3.081,617,5.153,618,2.94,619,4.244,620,4.755,621,5.154,622,3.676,623,5.995,624,5.153,625,5.018,626,4.793,627,3.676,628,4.566,629,3.42,630,3.42,631,4.793,632,4.793,633,3.42,634,3.42,635,4.793,636,4.793,637,4.12,638,4.793,639,5.623,640,4.793,641,3.42,642,4.12,643,3.42,644,2.94,645,2.94,646,3.42,647,3.42,648,3.42]],["title/classes/SignInDto.html",[49,0.086,199,2.217]],["body/classes/SignInDto.html",[3,0.203,4,0.179,5,0.179,9,0.275,20,0.542,23,0.018,25,0.434,36,0.366,48,0.203,49,0.125,81,0.013,82,0.013,150,3.914,167,1.492,193,1.744,199,3.207,267,1.584,321,2.022,332,1.447,335,2.823,344,3.475,359,4.618,360,3.601,362,2.995,364,4.618,366,1.779,369,2.972,371,1.522,447,4.487,459,2.81,606,4.618,628,4.487,637,4.618,642,4.618,649,3.475,650,5.372,651,5.372,652,6.429,653,6.429,654,5.372,655,4.043,656,4.043,657,5.372,658,5.372,659,5.372,660,4.043,661,4.043]],["title/injectables/SignInProvider.html",[38,0.375,232,2.217]],["body/injectables/SignInProvider.html",[3,0.143,4,0.127,5,0.127,9,0.194,10,0.93,11,1.339,13,1.572,15,1.075,17,4.557,18,3.544,19,3.544,20,0.424,22,0.976,23,0.019,24,0.93,25,0.403,26,0.843,31,0.631,36,0.444,37,1.326,38,0.424,39,1.833,40,0.465,41,1.405,42,1.59,44,1.59,48,0.143,49,0.066,51,1.649,52,1.498,53,1.833,54,1.073,58,2.3,59,2.183,62,1.189,64,1.788,68,0.631,70,1.189,71,1.189,81,0.01,82,0.01,112,1.59,119,4.44,150,2.344,163,0.841,180,3.075,181,2.451,190,3.225,197,0.926,198,3.225,199,3.509,209,2.187,229,3.216,232,2.51,236,1.405,243,1.99,245,1.702,254,1.702,255,1.99,256,2.723,260,1.702,263,1.59,296,1.99,310,1.161,335,1.129,379,1.833,449,1.702,450,2.187,455,1.99,476,4.294,477,4.294,491,1.99,506,2.451,612,2.187,662,4.294,663,2.451,664,4.995,665,2.852,666,2.852,667,2.852,668,2.852,669,2.852,670,2.852,671,4.205,672,2.852,673,4.995,674,2.451,675,2.187,676,2.852,677,2.852,678,2.852]],["title/entities/SocialAccounts.html",[679,2.388,680,2.217]],["body/entities/SocialAccounts.html",[3,0.174,4,0.154,5,0.154,9,0.236,20,0.68,23,0.019,25,0.544,36,0.38,48,0.174,49,0.081,69,2.891,81,0.012,82,0.012,113,4.107,167,1.526,193,2.19,267,1.428,310,1.472,312,1.528,405,2.918,504,2.985,589,3.389,619,4.279,620,4.795,621,4.588,622,2.664,645,2.985,675,3.716,679,3.114,680,2.891,681,2.664,682,2.985,683,4.279,684,4.795,685,3.473,686,3.473,687,5.651,688,3.473,689,5.187,690,4.795,691,3.473,692,4.164,693,3.473,694,3.473,695,4.795,696,3.473,697,3.473,698,4.844,699,4.844,700,4.164,701,4.844,702,3.473,703,4.844,704,2.985]],["title/controllers/SocialAccountsController.html",[83,1.398,705,2.593]],["body/controllers/SocialAccountsController.html",[3,0.149,4,0.132,5,0.132,9,0.203,10,0.96,11,1.674,13,0.761,15,0.761,20,0.567,22,1.306,23,0.019,24,1.244,25,0.454,26,1.128,31,1.244,34,5.252,36,0.383,40,0.485,48,0.149,49,0.069,51,0.798,52,0.725,68,1.244,81,0.011,82,0.011,83,1.12,85,1.31,112,1.66,113,3.571,167,1.189,187,1.914,193,1.827,197,1.409,203,2.79,206,1.777,310,1.078,405,3.13,588,4.015,589,2.947,616,4.248,705,3.029,706,2.559,707,4.34,708,4.34,709,3.73,710,3.73,711,3.73,712,2.977,713,4.34,714,2.977,715,6.739,716,2.559,717,4.34,718,2.977,719,2.977,720,3.73,721,2.977,722,2.977,723,4.34,724,2.977,725,2.078,726,2.559,727,2.559,728,2.559,729,2.559,730,2.559,731,3.359,732,2.559,733,2.559,734,2.977,735,2.977,736,5.121,737,5.121,738,5.121,739,5.121,740,2.977,741,2.977,742,2.977,743,2.977,744,2.977,745,2.977,746,2.977,747,2.977,748,2.977,749,2.977,750,2.977,751,2.977,752,2.977,753,2.977,754,2.977,755,2.977,756,2.977,757,2.977,758,2.977,759,2.977]],["title/modules/SocialAccountsModule.html",[90,1.83,103,2.388]],["body/modules/SocialAccountsModule.html",[3,0.216,4,0.191,5,0.191,23,0.019,36,0.476,40,0.701,48,0.216,49,0.1,81,0.014,82,0.014,85,2.462,90,3.063,92,2.397,93,2.397,94,2.764,95,2.764,96,2.397,97,3.997,98,2.764,103,4.644,104,3.902,105,3.596,106,2.764,107,2.764,109,3.905,112,3.119,113,2.567,116,3.298,117,1.794,238,3.696,589,2.118,680,2.567,705,4.34,731,4.177,732,3.696,733,3.696,760,3.696,761,4.3,762,3.696,763,4.3,764,4.3,765,3.298,766,4.3]],["title/injectables/SocialAccountsService.html",[38,0.375,731,2.217]],["body/injectables/SocialAccountsService.html",[3,0.103,4,0.091,5,0.091,9,0.14,10,0.723,11,1.728,13,0.836,15,0.836,20,0.511,22,1.177,23,0.019,24,1.121,25,0.409,26,1.016,31,1.027,36,0.4,38,0.33,40,0.335,48,0.103,49,0.048,51,0.877,52,0.797,54,2.032,58,2.526,59,2.138,61,2.843,62,2.115,64,1.815,68,1.027,70,1.699,71,2.69,81,0.008,82,0.008,112,1.146,117,0.857,163,0.606,167,1.497,197,1.507,217,1.577,255,1.435,256,2.362,260,1.227,296,2.283,303,2.652,310,1.307,312,0.905,313,1.075,343,2.103,348,0.857,379,2.619,381,1.321,393,2.843,394,2.843,395,2.843,396,2.843,398,1.435,405,3.075,437,3.538,447,2.843,449,1.227,478,1.577,479,1.577,502,5.543,523,1.435,540,1.952,588,3.471,589,2.659,616,3.778,619,3.562,625,4.142,680,1.227,709,2.812,710,2.812,711,2.812,716,2.812,725,1.435,727,1.767,728,1.767,729,1.767,730,1.767,731,1.952,765,1.577,767,4.641,768,1.767,769,3.271,770,4.074,771,2.056,772,3.271,773,2.056,774,2.056,775,3.271,776,2.056,777,3.271,778,2.056,779,2.056,780,2.056,781,3.241,782,2.056,783,2.056,784,2.056,785,2.056,786,3.125,787,2.056,788,1.767,789,2.056,790,2.056,791,3.271,792,2.056,793,3.271,794,3.271,795,3.271,796,2.812,797,2.812,798,2.812,799,2.812,800,2.056,801,2.056,802,2.056,803,2.056,804,1.767,805,3.271]],["title/entities/User.html",[310,0.782,679,2.388]],["body/entities/User.html",[3,0.125,4,0.111,5,0.111,9,0.169,20,0.672,23,0.019,25,0.558,26,1.313,36,0.377,48,0.125,49,0.088,69,4.162,80,1.486,81,0.009,82,0.009,113,1.486,148,2.567,150,2.567,167,1.604,193,2.163,267,1.12,310,1.085,312,1.096,321,0.937,335,1.823,336,4.255,354,2.748,367,1.601,368,1.91,369,3.164,371,0.937,405,2.409,444,2.96,445,2.96,459,1.303,490,2.96,527,2.651,589,1.226,622,1.91,625,2.914,628,3.596,675,1.91,679,2.442,680,3.075,681,1.91,683,3.532,684,3.958,687,5.388,689,4.428,690,3.265,692,2.14,695,3.265,700,3.265,704,2.14,765,1.91,781,3.214,806,2.14,807,2.49,808,3.798,809,2.49,810,2.49,811,2.49,812,4.605,813,2.49,814,2.49,815,3.798,816,2.49,817,2.49,818,3.798,819,3.798,820,3.798,821,3.798,822,2.49,823,2.49,824,2.49,825,2.49,826,2.49,827,2.49,828,2.49,829,3.798,830,3.798,831,3.798,832,3.798,833,2.49,834,3.798,835,5.846,836,2.49,837,2.49,838,2.49,839,2.49,840,2.49,841,3.798,842,2.49,843,5.846,844,2.49,845,2.49,846,2.49,847,2.49,848,2.14,849,2.14,850,1.91,851,1.91]],["title/classes/UserPreferencesDto.html",[49,0.086,354,2.217]],["body/classes/UserPreferencesDto.html",[3,0.176,4,0.156,5,0.156,9,0.239,20,0.565,23,0.019,25,0.453,36,0.382,48,0.176,49,0.113,69,3.618,80,2.912,81,0.012,82,0.012,193,1.821,206,2.912,267,1.439,321,2.482,332,1.256,343,3.136,348,2.035,350,4.231,354,2.912,366,1.544,370,4.65,371,1.321,454,3.742,527,3.915,528,3.605,532,4.194,538,3.016,602,2.692,628,4.231,639,3.016,644,3.016,674,4.194,848,4.821,849,4.821,850,5.442,851,3.742,852,5.211,853,4.879,854,4.194,855,4.879,856,3.509,857,3.509,858,4.879,859,4.879,860,3.509,861,3.509,862,5.609,863,3.509,864,3.016,865,4.879,866,4.879,867,3.509,868,4.194,869,4.194,870,3.509,871,4.879,872,3.509,873,4.879,874,3.509,875,3.509,876,3.509,877,3.509,878,3.016,879,3.509,880,3.509]],["title/controllers/UsersController.html",[83,1.398,881,2.593]],["body/controllers/UsersController.html",[3,0.129,4,0.114,5,0.114,9,0.175,10,0.862,13,0.658,15,0.658,20,0.597,22,1.375,23,0.019,24,1.31,25,0.496,26,1.187,31,1.31,36,0.457,40,0.42,48,0.129,49,0.06,51,0.69,52,0.627,68,1.31,81,0.009,82,0.009,83,0.969,85,1.133,187,1.655,188,1.347,193,1.923,203,3.022,206,2.326,211,1.537,213,1.797,219,1.975,254,2.441,256,2.186,310,1.247,315,1.655,331,3.302,348,1.074,367,1.655,380,1.975,381,3.022,400,3.671,402,1.975,491,1.797,522,3.807,540,4.009,596,4.072,601,4.072,720,3.349,725,1.797,726,2.214,881,2.72,882,2.214,883,3.897,884,3.349,885,3.349,886,3.349,887,4.04,888,4.04,889,2.575,890,2.575,891,2.575,892,2.214,893,2.575,894,2.214,895,2.575,896,2.214,897,3.897,898,2.575,899,2.575,900,3.897,901,2.575,902,2.575,903,3.897,904,2.575,905,2.575,906,2.575,907,2.575,908,2.575,909,3.349,910,2.214,911,3.349,912,2.214,913,3.606,914,1.975,915,2.575,916,2.575,917,2.214,918,2.575,919,2.575,920,2.575,921,2.575,922,2.575,923,2.575,924,2.575,925,2.575,926,2.575,927,2.575,928,2.575,929,2.575,930,2.575]],["title/modules/UsersModule.html",[90,1.83,104,2.071]],["body/modules/UsersModule.html",[3,0.166,4,0.147,5,0.147,23,0.019,36,0.487,40,0.539,48,0.166,49,0.077,81,0.011,82,0.011,85,2.058,90,2.674,92,1.842,93,1.842,94,2.124,95,2.124,96,1.842,97,3.49,98,3.49,102,2.791,104,4.151,105,3.006,106,2.124,107,2.124,109,2.306,116,2.534,117,1.378,236,2.304,256,2.984,297,3.861,299,2.175,310,1.243,311,1.728,323,3.861,324,2.175,348,2.264,375,3.861,469,3.861,480,3.861,487,3.861,881,3.789,912,2.84,931,2.84,932,2.84,933,2.84,934,3.304,935,3.304,936,3.304,937,5.429,938,4.666,939,5.429,940,2.84,941,4.02,942,3.304]],["title/injectables/UsersService.html",[38,0.375,256,1.55]],["body/injectables/UsersService.html",[3,0.06,4,0.053,5,0.053,9,0.081,10,0.46,11,1.829,13,1.194,15,0.531,20,0.547,22,1.259,23,0.019,24,1.2,25,0.438,26,1.087,31,1.166,32,3.29,36,0.414,37,0.556,38,0.21,40,0.195,48,0.06,49,0.064,51,1.313,52,1.138,54,1.918,58,2.321,59,1.94,61,2.304,62,1.712,64,1.673,68,1.2,70,1.56,71,2.535,80,1.241,81,0.005,82,0.005,83,0.782,117,0.498,163,0.352,167,1.346,188,0.625,197,0.896,207,2.459,217,2.117,236,0.588,254,2.326,256,0.867,263,0.666,296,0.834,297,2.79,299,0.967,301,1.787,303,1.727,305,1.84,306,1.787,307,2.404,309,0.834,310,1.391,311,0.625,312,0.526,313,0.625,314,1.027,315,1.336,317,0.666,319,1.595,321,0.45,322,1.647,323,2.925,324,0.967,325,1.787,327,1.787,328,2.404,329,1.027,331,2.085,335,0.473,336,2.532,343,1.774,348,1.377,367,0.768,375,2.79,376,1.787,377,1.787,379,1.336,380,0.916,381,1.774,384,2.532,393,2.304,394,2.61,395,2.61,396,2.61,397,2.837,398,2.304,405,2.975,420,0.834,437,2.61,444,0.768,449,1.97,469,2.633,478,0.916,479,0.916,480,2.79,487,2.79,488,1.787,489,1.787,490,0.768,491,2.865,522,2.638,525,2.837,526,2.372,529,1.027,540,3.147,596,3.004,601,3.15,683,0.916,725,1.451,781,0.834,788,2.372,797,1.027,798,1.027,799,1.027,804,2.372,884,1.787,885,1.787,886,1.787,887,1.787,888,2.372,892,1.787,894,1.787,896,1.787,909,1.787,910,1.027,911,1.787,938,2.372,940,1.027,941,1.787,943,1.027,944,2.76,945,2.079,946,1.195,947,1.195,948,1.195,949,1.195,950,1.195,951,1.195,952,1.195,953,1.195,954,2.079,955,1.195,956,2.079,957,1.195,958,1.195,959,2.079,960,1.195,961,1.195,962,1.195,963,1.195,964,2.079,965,1.195,966,1.195,967,1.195,968,1.195,969,1.195,970,1.195,971,1.027,972,2.079,973,1.195,974,1.195,975,1.195,976,1.195,977,2.76,978,2.079,979,3.3,980,2.079,981,1.195,982,1.195,983,1.195,984,1.195,985,1.195,986,1.195,987,1.195,988,1.195]],["title/coverage.html",[989,4.362]],["body/coverage.html",[0,2.792,1,1.514,5,0.105,6,2.025,7,1.644,8,2.025,23,0.018,25,0.19,38,0.712,46,1.807,49,0.158,59,0.933,81,0.009,82,0.009,83,2.152,84,1.644,86,2.025,87,1.406,96,1.313,113,2.173,131,1.644,133,1.644,164,2.025,170,1.644,171,2.025,180,1.232,185,1.644,186,2.025,188,1.232,192,1.406,199,1.406,207,1.313,228,1.406,229,1.16,230,1.406,231,1.406,232,1.406,234,1.644,235,1.644,253,2.025,256,0.983,266,2.025,277,1.807,297,1.406,298,3.105,299,1.693,300,3.105,307,1.514,310,1.204,323,1.406,324,1.693,328,1.514,331,1.313,333,2.025,334,3.105,348,2.087,354,1.406,375,1.406,399,1.644,400,1.406,402,1.807,403,3.105,406,2.025,407,2.025,421,2.025,422,2.792,426,1.514,433,2.025,434,2.792,439,1.644,457,2.025,458,3.105,464,2.025,469,1.406,470,3.105,471,2.025,480,1.406,481,2.792,487,1.406,492,2.792,522,1.514,523,2.541,524,2.025,540,1.406,544,1.807,545,2.025,547,1.514,553,2.025,580,2.025,581,2.025,582,2.025,588,1.514,589,2.664,590,2.025,591,2.025,596,1.514,597,2.792,601,1.514,602,2.792,604,2.025,609,2.025,616,1.514,617,2.025,618,2.025,649,2.025,662,2.025,663,2.025,679,2.34,680,1.406,682,2.025,705,1.644,706,2.025,731,1.406,767,2.025,768,2.025,806,2.025,852,2.025,881,1.644,882,2.025,913,1.807,914,1.807,943,2.025,971,6.545,989,2.025,990,2.356,991,2.356,992,6.455,993,6.158,994,6.96,995,3.129,996,5.004,997,2.025,998,2.025,999,5.409,1000,5.718,1001,2.025,1002,2.356,1003,2.356,1004,2.356,1005,2.356,1006,2.356,1007,2.356,1008,2.356]],["title/dependencies.html",[93,2.492,1009,2.665]],["body/dependencies.html",[23,0.019,40,0.769,41,2.325,42,2.631,43,4.056,49,0.138,81,0.014,82,0.014,93,2.631,117,1.968,128,3.62,182,4.056,188,2.469,275,3.62,281,4.056,312,2.077,324,2.195,366,2.077,368,3.62,371,1.776,438,4.056,562,4.056,1010,4.719,1011,4.719,1012,6.496,1013,4.719,1014,5.937,1015,4.719,1016,4.719,1017,4.719,1018,4.719,1019,4.719,1020,4.719,1021,4.719,1022,4.719,1023,4.719,1024,4.719,1025,4.719,1026,4.719,1027,4.719,1028,4.719,1029,4.719]],["title/miscellaneous/enumerations.html",[1030,1.85,1031,3.841]],["body/miscellaneous/enumerations.html",[9,0.308,23,0.018,81,0.014,82,0.014,211,3.453,299,2.69,528,4.835,589,2.85,621,4.038,627,4.438,786,4.438,850,4.438,851,4.438,868,4.973,869,4.973,917,3.894,1030,2.704,1031,3.894,1032,4.53,1033,5.785,1034,4.53,1035,4.53,1036,4.53,1037,4.53,1038,4.53,1039,4.53,1040,5.785,1041,5.785,1042,5.785,1043,5.785,1044,5.785,1045,5.785,1046,4.53,1047,5.785,1048,4.53]],["title/miscellaneous/functions.html",[1030,1.85,1049,3.841]],["body/miscellaneous/functions.html",[9,0.394,23,0.016,81,0.016,82,0.016,96,3.957,1001,4.975,1030,3.455,1049,4.975,1050,5.788]],["title/index.html",[9,0.211,1051,3.1,1052,3.1]],["body/index.html",[4,0.176,23,0.013,81,0.013,82,0.013,112,2.208,169,3.038,299,1.842,508,4.064,612,3.038,621,2.764,624,3.404,627,3.038,781,2.764,786,3.038,796,3.404,854,3.404,878,5.713,1053,3.96,1054,3.96,1055,6.646,1056,3.96,1057,3.96,1058,3.96,1059,3.96,1060,3.96,1061,5.299,1062,5.971,1063,5.971,1064,3.96,1065,3.96,1066,3.96,1067,3.96,1068,3.96,1069,3.96,1070,3.96,1071,3.96,1072,3.96,1073,3.96,1074,3.96,1075,3.96,1076,3.96,1077,3.96,1078,3.96,1079,5.971,1080,6.646,1081,3.96,1082,3.96,1083,3.96,1084,3.96,1085,3.96,1086,3.96,1087,3.96,1088,3.96,1089,3.96,1090,3.96,1091,3.96,1092,3.96,1093,3.96,1094,5.299,1095,3.96,1096,3.96,1097,3.96,1098,5.299,1099,3.96,1100,3.96,1101,3.96,1102,5.299,1103,3.96,1104,3.96,1105,3.96,1106,3.96,1107,3.96,1108,3.96,1109,3.96,1110,3.96,1111,3.96,1112,3.96,1113,3.96,1114,3.96,1115,5.299,1116,3.96,1117,3.96,1118,3.96,1119,3.96,1120,3.96,1121,3.96,1122,3.96,1123,3.96,1124,3.96,1125,3.96,1126,3.96,1127,3.96,1128,3.96,1129,3.96,1130,3.96]],["title/modules.html",[92,2.829]],["body/modules.html",[23,0.016,81,0.016,82,0.016,91,3.827,92,3.057,102,3.273,103,3.525,104,3.057,1131,7.178,1132,7.178,1133,7.178,1134,7.178]],["title/overview.html",[1135,4.362]],["body/overview.html",[2,2.63,23,0.018,80,2.047,81,0.012,82,0.012,85,1.509,87,3.307,90,1.689,91,4.928,92,1.912,93,1.912,94,2.204,95,2.204,96,1.912,97,2.204,98,2.204,99,2.948,100,2.948,101,2.948,102,4.429,103,4.321,104,4.169,105,3.086,106,2.204,107,2.204,163,1.011,180,3.14,207,3.748,225,2.948,226,2.948,227,2.948,228,3.307,229,2.729,230,3.307,231,3.307,232,3.307,256,2.804,297,3.307,323,3.307,332,1.228,375,3.307,399,2.393,469,3.307,480,3.307,487,3.307,681,2.63,731,3.307,760,2.948,762,2.948,931,2.948,932,2.948,933,2.948,1135,2.948,1136,3.429,1137,3.429,1138,4.801,1139,3.429,1140,3.429]],["title/properties.html",[267,1.318,1009,2.665]],["body/properties.html",[23,0.018,81,0.016,82,0.016,267,1.685,321,2.15,1141,5.714,1142,5.714,1143,5.714,1144,5.714,1145,5.714]],["title/miscellaneous/variables.html",[1030,1.85,1146,3.841]],["body/miscellaneous/variables.html",[9,0.307,23,0.019,25,0.466,28,3.151,34,3.463,46,4.428,54,2.172,67,3.881,68,0.998,81,0.014,82,0.014,167,1.34,188,3.02,211,3.446,277,4.428,285,4.962,310,1.459,400,3.446,527,4.682,528,4.312,864,3.881,913,4.428,914,3.463,995,3.881,997,3.881,998,4.962,1030,2.695,1146,3.881,1147,4.515,1148,5.773,1149,4.515,1150,4.515,1151,4.515,1152,5.773,1153,4.515,1154,4.515,1155,4.515,1156,4.515]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"interfaces/CurrentUser.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"classes/FacebookTokenDto.html":{},"classes/FacebookUser.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetAllUsersParamDto.html":{},"classes/GetOneUserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"classes/LinkYoutubeDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPreferencesDTo.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/SocialAccounts.html":{},"controllers/SocialAccountsController.html":{},"modules/SocialAccountsModule.html":{},"injectables/SocialAccountsService.html":{},"entities/User.html":{},"classes/UserPreferencesDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":971,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1142,"title":{},"body":{"properties.html":{}}}],["0.14.2",{"_index":1020,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":1027,"title":{},"body":{"dependencies.html":{}}}],["0.3.27",{"_index":1029,"title":{},"body":{"dependencies.html":{}}}],["0.44.0",{"_index":1017,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1019,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":992,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":993,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":994,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":999,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1000,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1003,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1006,"title":{},"body":{"coverage.html":{}}}],["0b9ceb163a49",{"_index":752,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["1",{"_index":80,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/GetAllUsersParamDto.html":{},"entities/User.html":{},"classes/UserPreferencesDto.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["1)'})@isoptional()@isint()@min(1",{"_index":535,"title":{},"body":{"classes/GetAllUsersParamDto.html":{}}}],["1.1.26",{"_index":1011,"title":{},"body":{"dependencies.html":{}}}],["1.12.2",{"_index":1018,"title":{},"body":{"dependencies.html":{}}}],["1/13",{"_index":1005,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":529,"title":{},"body":{"classes/GetAllUsersParamDto.html":{},"injectables/UsersService.html":{}}}],["10)'})@isoptional()@isint()@min(1",{"_index":533,"title":{},"body":{"classes/GetAllUsersParamDto.html":{}}}],["10.4.0",{"_index":1021,"title":{},"body":{"dependencies.html":{}}}],["11.0.0",{"_index":1014,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":1012,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":1016,"title":{},"body":{"dependencies.html":{}}}],["14",{"_index":1140,"title":{},"body":{"overview.html":{}}}],["18",{"_index":1139,"title":{},"body":{"overview.html":{}}}],["18.0.1",{"_index":1023,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":1138,"title":{},"body":{"overview.html":{}}}],["2344c0d4b308",{"_index":844,"title":{},"body":{"entities/User.html":{}}}],["2344c0d4b308'})@primarygeneratedcolumn('uuid",{"_index":822,"title":{},"body":{"entities/User.html":{}}}],["2b$10$xyz",{"_index":847,"title":{},"body":{"entities/User.html":{}}}],["2b$10$xyz...'})@column({nullable",{"_index":825,"title":{},"body":{"entities/User.html":{}}}],["2bd9da1f4903",{"_index":759,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["3",{"_index":858,"title":{},"body":{"classes/UserPreferencesDto.html":{}}}],["307b",{"_index":749,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["3888",{"_index":820,"title":{},"body":{"entities/User.html":{}}}],["4",{"_index":1136,"title":{},"body":{"overview.html":{}}}],["4.0.2",{"_index":1013,"title":{},"body":{"dependencies.html":{}}}],["42e4",{"_index":750,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["4999",{"_index":742,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["4a5f",{"_index":741,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["4c48",{"_index":757,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["6",{"_index":1137,"title":{},"body":{"overview.html":{}}}],["7",{"_index":1004,"title":{},"body":{"coverage.html":{}}}],["7.8.1",{"_index":1028,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":344,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["8.16.3",{"_index":1025,"title":{},"body":{"dependencies.html":{}}}],["8bf9",{"_index":819,"title":{},"body":{"entities/User.html":{}}}],["8})@isnotempty()@isstring",{"_index":660,"title":{},"body":{"classes/SignInDto.html":{}}}],["911f",{"_index":751,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["98ef9bd1",{"_index":755,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["9912",{"_index":821,"title":{},"body":{"entities/User.html":{}}}],["a3bb189e",{"_index":818,"title":{},"body":{"entities/User.html":{}}}],["abstract",{"_index":583,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["access",{"_index":276,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["accesstoken",{"_index":514,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["account",{"_index":447,"title":{},"body":{"injectables/FacebookAuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/SignInDto.html":{},"injectables/SocialAccountsService.html":{}}}],["accounts",{"_index":707,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["accounts.controller",{"_index":764,"title":{},"body":{"modules/SocialAccountsModule.html":{}}}],["accounts.controller.ts",{"_index":706,"title":{},"body":{"controllers/SocialAccountsController.html":{},"coverage.html":{}}}],["accounts.controller.ts:17",{"_index":714,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["accounts.controller.ts:24",{"_index":718,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["accounts.controller.ts:29",{"_index":724,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["accounts.controller.ts:36",{"_index":721,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["accounts.entity",{"_index":765,"title":{},"body":{"modules/SocialAccountsModule.html":{},"injectables/SocialAccountsService.html":{},"entities/User.html":{}}}],["accounts.entity.ts",{"_index":682,"title":{},"body":{"entities/SocialAccounts.html":{},"coverage.html":{}}}],["accounts.entity.ts:11",{"_index":686,"title":{},"body":{"entities/SocialAccounts.html":{}}}],["accounts.entity.ts:14",{"_index":688,"title":{},"body":{"entities/SocialAccounts.html":{}}}],["accounts.entity.ts:17",{"_index":694,"title":{},"body":{"entities/SocialAccounts.html":{}}}],["accounts.entity.ts:23",{"_index":702,"title":{},"body":{"entities/SocialAccounts.html":{}}}],["accounts.entity.ts:26",{"_index":691,"title":{},"body":{"entities/SocialAccounts.html":{}}}],["accounts.entity.ts:29",{"_index":696,"title":{},"body":{"entities/SocialAccounts.html":{}}}],["accounts.entity.ts:8",{"_index":693,"title":{},"body":{"entities/SocialAccounts.html":{}}}],["accounts.module",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["accounts.module.ts",{"_index":763,"title":{},"body":{"modules/SocialAccountsModule.html":{}}}],["accounts.service",{"_index":733,"title":{},"body":{"controllers/SocialAccountsController.html":{},"modules/SocialAccountsModule.html":{}}}],["accounts.service.ts",{"_index":768,"title":{},"body":{"injectables/SocialAccountsService.html":{},"coverage.html":{}}}],["accounts.service.ts:11",{"_index":771,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["accounts.service.ts:26",{"_index":773,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["accounts.service.ts:52",{"_index":774,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["accounts.service.ts:59",{"_index":778,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["accounts.service.ts:94",{"_index":776,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["accounts/dtos/link",{"_index":590,"title":{},"body":{"classes/LinkYoutubeDto.html":{},"coverage.html":{}}}],["accounts/dtos/select",{"_index":617,"title":{},"body":{"classes/SelectChannelDto.html":{},"coverage.html":{}}}],["accounts/enums/niche.enums.ts",{"_index":1039,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["accounts/enums/plateform.enums.ts",{"_index":1046,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["accounts/providers/social",{"_index":767,"title":{},"body":{"injectables/SocialAccountsService.html":{},"coverage.html":{}}}],["accounts/social",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"entities/SocialAccounts.html":{},"controllers/SocialAccountsController.html":{},"modules/SocialAccountsModule.html":{},"entities/User.html":{},"coverage.html":{}}}],["address",{"_index":650,"title":{},"body":{"classes/SignInDto.html":{}}}],["again",{"_index":798,"title":{},"body":{"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["already",{"_index":387,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["apiproperty",{"_index":369,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FacebookTokenDto.html":{},"classes/GetOneUserParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/LinkYoutubeDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{},"entities/User.html":{}}}],["apiproperty()@column({nullable",{"_index":827,"title":{},"body":{"entities/User.html":{}}}],["apiproperty()@isemail()@isnotempty",{"_index":337,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isstring()@minlength(3)@isnotempty",{"_index":357,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isstring()@minlength(8)@isnotempty()@matches(/^(?=.*[a",{"_index":339,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty({description",{"_index":459,"title":{},"body":{"classes/FacebookTokenDto.html":{},"classes/GetOneUserParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/LinkYoutubeDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{},"entities/User.html":{}}}],["apiproperty({example",{"_index":812,"title":{},"body":{"entities/User.html":{}}}],["apipropertyoptional",{"_index":370,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetAllUsersParamDto.html":{},"classes/UserPreferencesDto.html":{}}}],["apipropertyoptional()@isoptional()@validatenested()@type(undefined",{"_index":355,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apipropertyoptional({description",{"_index":530,"title":{},"body":{"classes/GetAllUsersParamDto.html":{}}}],["apipropertyoptional({enum",{"_index":863,"title":{},"body":{"classes/UserPreferencesDto.html":{}}}],["apipropertyoptional({example",{"_index":853,"title":{},"body":{"classes/UserPreferencesDto.html":{}}}],["apiversion",{"_index":418,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["app.controller",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":88,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":84,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":91,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":87,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argon2",{"_index":182,"title":{},"body":{"injectables/Argon2Provider.html":{},"dependencies.html":{}}}],["argon2.hash(password",{"_index":183,"title":{},"body":{"injectables/Argon2Provider.html":{}}}],["argon2.verify(encrypted",{"_index":184,"title":{},"body":{"injectables/Argon2Provider.html":{}}}],["argon2provider",{"_index":170,"title":{"injectables/Argon2Provider.html":{}},"body":{"injectables/Argon2Provider.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["associated",{"_index":651,"title":{},"body":{"classes/SignInDto.html":{}}}],["async",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["attention",{"_index":1129,"title":{},"body":{"index.html":{}}}],["audience",{"_index":508,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"index.html":{}}}],["audiences",{"_index":1121,"title":{},"body":{"index.html":{}}}],["auth",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.none",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["auth(authtype.none)@useinterceptors(classserializerinterceptor)@post",{"_index":890,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth.controller",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/config/jwt.config",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/access",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/authentication.guard",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_type_key",{"_index":277,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":185,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":424,"title":{},"body":{"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"classes/FacebookTokenDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{}}}],["authenticate(@body",{"_index":431,"title":{},"body":{"controllers/FacebookAuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["authenticate(facebooktokendto",{"_index":425,"title":{},"body":{"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{}}}],["authenticate(googletokendto",{"_index":546,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authenticated",{"_index":737,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["authentication",{"_index":423,"title":{},"body":{"controllers/FacebookAuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/RefreshTokenDto.html":{}}}],["authentication'})@isstring()@isnotempty",{"_index":607,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["authentication.controller",{"_index":248,"title":{},"body":{"modules/AuthModule.html":{}}}],["authentication.controller.ts",{"_index":422,"title":{},"body":{"controllers/FacebookAuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller.ts:15",{"_index":427,"title":{},"body":{"controllers/FacebookAuthenticationController.html":{}}}],["authentication.controller.ts:19",{"_index":548,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service",{"_index":250,"title":{},"body":{"modules/AuthModule.html":{},"controllers/FacebookAuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service.ts",{"_index":434,"title":{},"body":{"injectables/FacebookAuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:12",{"_index":557,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:23",{"_index":436,"title":{},"body":{"injectables/FacebookAuthenticationService.html":{}}}],["authentication.service.ts:33",{"_index":559,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:39",{"_index":558,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:8",{"_index":435,"title":{},"body":{"injectables/FacebookAuthenticationService.html":{}}}],["authenticationguard",{"_index":131,"title":{"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authheader",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["authheader.split",{"_index":79,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["authheader.startswith('bearer",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["authmodule",{"_index":102,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1145,"title":{},"body":{"properties.html":{}}}],["authorized",{"_index":801,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["authservice",{"_index":207,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["authtype",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":279,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":284,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguardmap",{"_index":268,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":285,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypes.map((type",{"_index":290,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["auto",{"_index":855,"title":{},"body":{"classes/UserPreferencesDto.html":{}}}],["autoloadentities",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":1086,"title":{},"body":{"index.html":{}}}],["autopost",{"_index":849,"title":{},"body":{"entities/User.html":{},"classes/UserPreferencesDto.html":{}}}],["await",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["axios",{"_index":438,"title":{},"body":{"injectables/FacebookAuthenticationService.html":{},"dependencies.html":{}}}],["axios.get",{"_index":442,"title":{},"body":{"injectables/FacebookAuthenticationService.html":{}}}],["b996",{"_index":743,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["bb40",{"_index":758,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["bc22",{"_index":756,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["bearer",{"_index":1037,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["becomes",{"_index":1124,"title":{},"body":{"index.html":{}}}],["belongs",{"_index":636,"title":{},"body":{"classes/SelectChannelDto.html":{}}}],["beyond",{"_index":1096,"title":{},"body":{"index.html":{}}}],["body",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FacebookAuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/SocialAccountsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":674,"title":{},"body":{"injectables/SignInProvider.html":{},"classes/UserPreferencesDto.html":{}}}],["bootstrap",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SocialAccountsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["brand",{"_index":1115,"title":{},"body":{"index.html":{}}}],["brands",{"_index":1074,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1134,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1131,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":175,"title":{},"body":{"injectables/Argon2Provider.html":{},"injectables/HashingProvider.html":{}}}],["built",{"_index":1081,"title":{},"body":{"index.html":{}}}],["business",{"_index":1108,"title":{},"body":{"index.html":{}}}],["businesses",{"_index":1071,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":413,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["canactivate",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["canactivate(context",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["cascade",{"_index":700,"title":{},"body":{"entities/SocialAccounts.html":{},"entities/User.html":{}}}],["catch",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["category",{"_index":635,"title":{},"body":{"classes/SelectChannelDto.html":{}}}],["ceateuser",{"_index":376,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["ceateuser(createuserdto",{"_index":377,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["channel",{"_index":625,"title":{},"body":{"classes/SelectChannelDto.html":{},"injectables/SocialAccountsService.html":{},"entities/User.html":{}}}],["channel.dto",{"_index":730,"title":{},"body":{"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{}}}],["channel.dto.ts",{"_index":618,"title":{},"body":{"classes/SelectChannelDto.html":{},"coverage.html":{}}}],["channel.dto.ts:12",{"_index":630,"title":{},"body":{"classes/SelectChannelDto.html":{}}}],["channel.dto.ts:20",{"_index":634,"title":{},"body":{"classes/SelectChannelDto.html":{}}}],["channel.dto.ts:28",{"_index":643,"title":{},"body":{"classes/SelectChannelDto.html":{}}}],["channel.user",{"_index":808,"title":{},"body":{"entities/User.html":{}}}],["channelid",{"_index":619,"title":{},"body":{"classes/SelectChannelDto.html":{},"entities/SocialAccounts.html":{},"injectables/SocialAccountsService.html":{}}}],["channelname",{"_index":620,"title":{},"body":{"classes/SelectChannelDto.html":{},"entities/SocialAccounts.html":{}}}],["channels",{"_index":781,"title":{},"body":{"injectables/SocialAccountsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["character",{"_index":352,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":345,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":668,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["class",{"_index":49,"title":{"classes/CreateUserDto.html":{},"classes/FacebookTokenDto.html":{},"classes/FacebookUser.html":{},"classes/GetAllUsersParamDto.html":{},"classes/GetOneUserParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"classes/LinkYoutubeDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPreferencesDTo.html":{},"classes/RefreshTokenDto.html":{},"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{},"classes/UserPreferencesDto.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"classes/FacebookTokenDto.html":{},"classes/FacebookUser.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetAllUsersParamDto.html":{},"classes/GetOneUserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"classes/LinkYoutubeDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPreferencesDTo.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/SocialAccounts.html":{},"controllers/SocialAccountsController.html":{},"modules/SocialAccountsModule.html":{},"injectables/SocialAccountsService.html":{},"entities/User.html":{},"classes/UserPreferencesDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":332,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FacebookTokenDto.html":{},"classes/FacebookUser.html":{},"classes/GetAllUsersParamDto.html":{},"classes/GetOneUserParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"classes/LinkYoutubeDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPreferencesDTo.html":{},"classes/RefreshTokenDto.html":{},"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{},"classes/UserPreferencesDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":905,"title":{},"body":{"controllers/UsersController.html":{}}}],["clientid",{"_index":565,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clientsecret",{"_index":567,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["cluster_appmodule",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_socialaccountsmodule",{"_index":760,"title":{},"body":{"modules/SocialAccountsModule.html":{},"overview.html":{}}}],["cluster_socialaccountsmodule_imports",{"_index":761,"title":{},"body":{"modules/SocialAccountsModule.html":{}}}],["cluster_socialaccountsmodule_providers",{"_index":762,"title":{},"body":{"modules/SocialAccountsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":931,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":932,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":933,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":592,"title":{},"body":{"classes/LinkYoutubeDto.html":{}}}],["cofigservice",{"_index":506,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["column",{"_index":687,"title":{},"body":{"entities/SocialAccounts.html":{},"entities/User.html":{}}}],["column({unique",{"_index":685,"title":{},"body":{"entities/SocialAccounts.html":{}}}],["common/interceptors/data",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["compare",{"_index":672,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["comparepassword",{"_index":172,"title":{},"body":{"injectables/Argon2Provider.html":{},"injectables/HashingProvider.html":{}}}],["comparepassword(data",{"_index":584,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["comparepassword(password",{"_index":174,"title":{},"body":{"injectables/Argon2Provider.html":{}}}],["comparison",{"_index":678,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["compodoc/compodoc",{"_index":1010,"title":{},"body":{"dependencies.html":{}}}],["config/database.config",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["config/env.validation",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["configmodule",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["configservice.get('database.autoloadentities",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.database",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.username",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["configuration",{"_index":564,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["conflictexception",{"_index":309,"title":{},"body":{"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["conflictexception('a",{"_index":386,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["conflictexception(error",{"_index":320,"title":{},"body":{"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{}}}],["connecting",{"_index":1127,"title":{},"body":{"index.html":{}}}],["consistent",{"_index":1061,"title":{},"body":{"index.html":{}}}],["console",{"_index":316,"title":{},"body":{"injectables/CreateFacebookUserProvider.html":{}}}],["console.error",{"_index":793,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["console.error('error",{"_index":478,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["console.error('failed",{"_index":397,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["const",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constants/auth.constants",{"_index":278,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":946,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(configservice",{"_index":409,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["constructor(jwtconfiguration",{"_index":556,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["constructor(jwtservice",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["constructor(private",{"_index":89,"title":{},"body":{"controllers/AppController.html":{}}}],["constructor(reflector",{"_index":270,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(usersrepository",{"_index":302,"title":{},"body":{"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{}}}],["constructor(usersservice",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/SignInProvider.html":{},"injectables/SocialAccountsService.html":{}}}],["contain",{"_index":347,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["content",{"_index":878,"title":{},"body":{"classes/UserPreferencesDto.html":{},"index.html":{}}}],["content'})@isboolean",{"_index":856,"title":{},"body":{"classes/UserPreferencesDto.html":{}}}],["context",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["context.getclass",{"_index":288,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.gethandler",{"_index":287,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["controller",{"_index":83,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FacebookAuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/SocialAccountsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FacebookAuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/SocialAccountsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["controller('auth",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('facebook",{"_index":430,"title":{},"body":{"controllers/FacebookAuthenticationController.html":{}}}],["controller('google",{"_index":551,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["controller('social",{"_index":734,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["controller('users",{"_index":918,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":85,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/FacebookAuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/SocialAccountsController.html":{},"modules/SocialAccountsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":989,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":322,"title":{},"body":{"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FacebookAuthenticationService.html":{},"classes/PatchUserDto.html":{},"injectables/UsersService.html":{}}}],["createdat",{"_index":683,"title":{},"body":{"entities/SocialAccounts.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["createdatecolumn",{"_index":690,"title":{},"body":{"entities/SocialAccounts.html":{},"entities/User.html":{}}}],["createfacebookuser",{"_index":301,"title":{},"body":{"injectables/CreateFacebookUserProvider.html":{},"injectables/UsersService.html":{}}}],["createfacebookuser(facebookuser",{"_index":306,"title":{},"body":{"injectables/CreateFacebookUserProvider.html":{},"injectables/UsersService.html":{}}}],["createfacebookuserprovider",{"_index":297,"title":{"injectables/CreateFacebookUserProvider.html":{}},"body":{"injectables/CreateFacebookUserProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["creategoogleuser",{"_index":325,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UsersService.html":{}}}],["creategoogleuser(googleuser",{"_index":327,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UsersService.html":{}}}],["creategoogleuserprovider",{"_index":323,"title":{"injectables/CreateGoogleUserProvider.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["createparamdecorator",{"_index":1151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuser",{"_index":883,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(@body",{"_index":925,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":889,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuserdto",{"_index":331,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":385,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserprovider",{"_index":375,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["creating",{"_index":1060,"title":{},"body":{"index.html":{}}}],["creator",{"_index":1106,"title":{},"body":{"index.html":{}}}],["creators",{"_index":1069,"title":{},"body":{"index.html":{}}}],["credentials",{"_index":477,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/SignInProvider.html":{}}}],["cross",{"_index":1084,"title":{},"body":{"index.html":{}}}],["ctx",{"_index":1154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["curate",{"_index":1113,"title":{},"body":{"index.html":{}}}],["curates",{"_index":1088,"title":{},"body":{"index.html":{}}}],["currentuser",{"_index":400,"title":{"interfaces/CurrentUser.html":{}},"body":{"interfaces/CurrentUser.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["currentuserdata",{"_index":913,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":420,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/UsersService.html":{}}}],["data.decorator",{"_index":915,"title":{},"body":{"controllers/UsersController.html":{}}}],["data.decorator.ts",{"_index":998,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["databaseconfig",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["dataresponseinterceptor",{"_index":133,"title":{"injectables/DataResponseInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["date",{"_index":689,"title":{},"body":{"entities/SocialAccounts.html":{},"entities/User.html":{}}}],["day",{"_index":875,"title":{},"body":{"classes/UserPreferencesDto.html":{}}}],["day'})@isnumber()@min(0)@max(3",{"_index":860,"title":{},"body":{"classes/UserPreferencesDto.html":{}}}],["declarations",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SocialAccountsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"controllers/FacebookAuthenticationController.html":{},"classes/FacebookTokenDto.html":{},"classes/GetAllUsersParamDto.html":{},"classes/GetOneUserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/GoogleTokenDto.html":{},"classes/LinkYoutubeDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{},"entities/SocialAccounts.html":{},"controllers/SocialAccountsController.html":{},"entities/User.html":{},"classes/UserPreferencesDto.html":{},"controllers/UsersController.html":{}}}],["decorators/auth.decorator",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["default",{"_index":527,"title":{},"body":{"classes/GetAllUsersParamDto.html":{},"entities/User.html":{},"classes/UserPreferencesDto.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":269,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["defined",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"classes/FacebookTokenDto.html":{},"classes/FacebookUser.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetAllUsersParamDto.html":{},"classes/GetOneUserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"classes/LinkYoutubeDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/SocialAccounts.html":{},"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{},"entities/User.html":{},"classes/UserPreferencesDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":725,"title":{},"body":{"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete(':id",{"_index":720,"title":{},"body":{"controllers/SocialAccountsController.html":{},"controllers/UsersController.html":{}}}],["deleted",{"_index":983,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuser",{"_index":884,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuser(@param",{"_index":929,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(getoneuserparamdto",{"_index":892,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deliver",{"_index":1099,"title":{},"body":{"index.html":{}}}],["demand",{"_index":1078,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":93,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SocialAccountsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":919,"title":{},"body":{"controllers/UsersController.html":{}}}],["desc",{"_index":969,"title":{},"body":{"injectables/UsersService.html":{}}}],["description",{"_index":321,"title":{},"body":{"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/FacebookTokenDto.html":{},"classes/GetAllUsersParamDto.html":{},"classes/GetOneUserParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/LinkYoutubeDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"classes/UserPreferencesDto.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["digital",{"_index":1054,"title":{},"body":{"index.html":{}}}],["discover",{"_index":1111,"title":{},"body":{"index.html":{}}}],["display",{"_index":631,"title":{},"body":{"classes/SelectChannelDto.html":{}}}],["documentation",{"_index":990,"title":{},"body":{"coverage.html":{}}}],["dtos/create",{"_index":380,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/facebook",{"_index":429,"title":{},"body":{"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{}}}],["dtos/get",{"_index":909,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/google",{"_index":550,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["dtos/link",{"_index":727,"title":{},"body":{"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{}}}],["dtos/patch",{"_index":911,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/refresh",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["dtos/select",{"_index":729,"title":{},"body":{"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{}}}],["dtos/signin.dto",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["dtos/user",{"_index":842,"title":{},"body":{"entities/User.html":{}}}],["during",{"_index":606,"title":{},"body":{"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["e30141424235",{"_index":744,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["eager",{"_index":701,"title":{},"body":{"entities/SocialAccounts.html":{}}}],["education",{"_index":1045,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["effortless",{"_index":1098,"title":{},"body":{"index.html":{}}}],["email",{"_index":335,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"interfaces/CurrentUser.html":{},"injectables/FacebookAuthenticationService.html":{},"classes/FacebookUser.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleUser.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["email'})@isemail()@isnotempty",{"_index":655,"title":{},"body":{"classes/SignInDto.html":{}}}],["email.provider",{"_index":940,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["email.provider.ts",{"_index":471,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"coverage.html":{}}}],["email.provider.ts:18",{"_index":475,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["email.provider.ts:7",{"_index":473,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["encrypted",{"_index":176,"title":{},"body":{"injectables/Argon2Provider.html":{},"injectables/HashingProvider.html":{}}}],["engaging",{"_index":1079,"title":{},"body":{"index.html":{}}}],["entities",{"_index":681,"title":{},"body":{"entities/SocialAccounts.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":679,"title":{"entities/SocialAccounts.html":{},"entities/User.html":{}},"body":{"entities/SocialAccounts.html":{},"entities/User.html":{},"coverage.html":{}}}],["entrepreneur",{"_index":1107,"title":{},"body":{"index.html":{}}}],["enum",{"_index":639,"title":{},"body":{"classes/SelectChannelDto.html":{},"classes/UserPreferencesDto.html":{}}}],["enumerations",{"_index":1031,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/auth",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["enums/niche.enums",{"_index":645,"title":{},"body":{"classes/SelectChannelDto.html":{},"entities/SocialAccounts.html":{}}}],["enums/replytone.enums",{"_index":874,"title":{},"body":{"classes/UserPreferencesDto.html":{}}}],["envfilepath",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["envvalidation",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["error.message",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["established",{"_index":1073,"title":{},"body":{"index.html":{}}}],["even",{"_index":1072,"title":{},"body":{"index.html":{}}}],["everyone",{"_index":1067,"title":{},"body":{"index.html":{}}}],["example",{"_index":628,"title":{},"body":{"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"classes/UserPreferencesDto.html":{}}}],["exclude",{"_index":843,"title":{},"body":{"entities/User.html":{}}}],["exclude()@apiproperty()@column({nullable",{"_index":815,"title":{},"body":{"entities/User.html":{}}}],["exclude()@apiproperty({example",{"_index":824,"title":{},"body":{"entities/User.html":{}}}],["exclude()@createdatecolumn",{"_index":810,"title":{},"body":{"entities/User.html":{}}}],["exclude()@updatedatecolumn",{"_index":837,"title":{},"body":{"entities/User.html":{}}}],["executioncontext",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["existinguser",{"_index":383,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["exists",{"_index":388,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["expanding",{"_index":1093,"title":{},"body":{"index.html":{}}}],["expired",{"_index":456,"title":{},"body":{"injectables/FacebookAuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["expiresin",{"_index":499,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["export",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"interfaces/CurrentUser.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"classes/FacebookTokenDto.html":{},"classes/FacebookUser.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetAllUsersParamDto.html":{},"classes/GetOneUserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"classes/LinkYoutubeDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPreferencesDTo.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/SocialAccounts.html":{},"controllers/SocialAccountsController.html":{},"modules/SocialAccountsModule.html":{},"injectables/SocialAccountsService.html":{},"entities/User.html":{},"classes/UserPreferencesDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SocialAccountsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"dependencies.html":{}}}],["extends",{"_index":598,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/PatchUserPreferencesDTo.html":{}}}],["extract",{"_index":575,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["extracttokenfromheader",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extracttokenfromheader(request",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["facebook",{"_index":299,"title":{},"body":{"injectables/CreateFacebookUserProvider.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"classes/FacebookTokenDto.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["facebookauthenticationcontroller",{"_index":235,"title":{"controllers/FacebookAuthenticationController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/FacebookAuthenticationController.html":{},"coverage.html":{}}}],["facebookauthenticationservice",{"_index":228,"title":{"injectables/FacebookAuthenticationService.html":{}},"body":{"modules/AuthModule.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["facebookid",{"_index":444,"title":{},"body":{"injectables/FacebookAuthenticationService.html":{},"classes/FacebookUser.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["facebooktokendto",{"_index":426,"title":{"classes/FacebookTokenDto.html":{}},"body":{"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"classes/FacebookTokenDto.html":{},"coverage.html":{}}}],["facebookuser",{"_index":307,"title":{"classes/FacebookUser.html":{}},"body":{"injectables/CreateFacebookUserProvider.html":{},"classes/FacebookUser.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["failed",{"_index":296,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/SignInProvider.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["false",{"_index":675,"title":{},"body":{"injectables/SignInProvider.html":{},"entities/SocialAccounts.html":{},"entities/User.html":{}}}],["false})@column({type",{"_index":833,"title":{},"body":{"entities/User.html":{}}}],["fetch",{"_index":972,"title":{},"body":{"injectables/UsersService.html":{}}}],["field",{"_index":1152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"interfaces/CurrentUser.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"classes/FacebookTokenDto.html":{},"classes/FacebookUser.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetAllUsersParamDto.html":{},"classes/GetOneUserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"classes/LinkYoutubeDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPreferencesDTo.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/SocialAccounts.html":{},"controllers/SocialAccountsController.html":{},"modules/SocialAccountsModule.html":{},"injectables/SocialAccountsService.html":{},"entities/User.html":{},"classes/UserPreferencesDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["find",{"_index":449,"title":{},"body":{"injectables/FacebookAuthenticationService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["findallusers",{"_index":885,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findallusers(@query",{"_index":920,"title":{},"body":{"controllers/UsersController.html":{}}}],["findallusers(getallusersparamdto",{"_index":894,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["finding",{"_index":479,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["findonebyemail",{"_index":472,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["findonebyemail(email",{"_index":474,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["findonebyfacebookid",{"_index":482,"title":{},"body":{"injectables/FindOneUserByFacebookIdProvider.html":{}}}],["findonebyfacebookid(facebookid",{"_index":484,"title":{},"body":{"injectables/FindOneUserByFacebookIdProvider.html":{}}}],["findoneuser",{"_index":886,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findoneuser(@param",{"_index":922,"title":{},"body":{"controllers/UsersController.html":{}}}],["findoneuser(getoneuserparamdto",{"_index":896,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findoneuserbyemail",{"_index":944,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneuserbyemail(email",{"_index":954,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneuserbyemailprovider",{"_index":469,"title":{"injectables/FindOneUserByEmailProvider.html":{}},"body":{"injectables/FindOneUserByEmailProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["findoneuserbyfacebookid",{"_index":945,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneuserbyfacebookid(facebookid",{"_index":956,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneuserbyfacebookidprovider",{"_index":480,"title":{"injectables/FindOneUserByFacebookIdProvider.html":{}},"body":{"injectables/FindOneUserByFacebookIdProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["findoneuserbygoogleid",{"_index":488,"title":{},"body":{"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/UsersService.html":{}}}],["findoneuserbygoogleid(googleid",{"_index":489,"title":{},"body":{"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/UsersService.html":{}}}],["findoneuserbygoogleidprovider",{"_index":487,"title":{"injectables/FindOneUserByGoogleIdProvider.html":{}},"body":{"injectables/FindOneUserByGoogleIdProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["fits",{"_index":1114,"title":{},"body":{"index.html":{}}}],["focus",{"_index":1125,"title":{},"body":{"index.html":{}}}],["form",{"_index":738,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["format",{"_index":653,"title":{},"body":{"classes/SignInDto.html":{}}}],["forwardref",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["frequencyofupload",{"_index":848,"title":{},"body":{"entities/User.html":{},"classes/UserPreferencesDto.html":{}}}],["function",{"_index":1002,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1049,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gaming",{"_index":1044,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["generate",{"_index":612,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"index.html":{}}}],["generated",{"_index":454,"title":{},"body":{"injectables/FacebookAuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/UserPreferencesDto.html":{}}}],["generates",{"_index":1089,"title":{},"body":{"index.html":{}}}],["generatetokens",{"_index":493,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokens(user",{"_index":496,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokensprovider",{"_index":229,"title":{"injectables/GenerateTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["get(':id",{"_index":897,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('my",{"_index":713,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["getaccounts",{"_index":769,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["getaccounts(userid",{"_index":772,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["getallusersparamdto",{"_index":522,"title":{"classes/GetAllUsersParamDto.html":{}},"body":{"classes/GetAllUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["gethello",{"_index":165,"title":{},"body":{"injectables/AppService.html":{}}}],["getmyaccounts",{"_index":708,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["getmyaccounts(@req",{"_index":735,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["getmyaccounts(req",{"_index":712,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["getoneuserparamdto",{"_index":540,"title":{"classes/GetOneUserParamDto.html":{}},"body":{"classes/GetOneUserParamDto.html":{},"injectables/SocialAccountsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["getting",{"_index":1051,"title":{"index.html":{}},"body":{}}],["given_name",{"_index":576,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["google",{"_index":324,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/LinkYoutubeDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["google'})@isstring",{"_index":594,"title":{},"body":{"classes/LinkYoutubeDto.html":{}}}],["googleauthenticationcontroller",{"_index":234,"title":{"controllers/GoogleAuthenticationController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["googleauthenticationservice",{"_index":230,"title":{"injectables/GoogleAuthenticationService.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["googleid",{"_index":490,"title":{},"body":{"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleUser.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["googletokendto",{"_index":547,"title":{"classes/GoogleTokenDto.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["googletokendto.token",{"_index":574,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["googleuser",{"_index":328,"title":{"classes/GoogleUser.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/GoogleUser.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["grow",{"_index":1058,"title":{},"body":{"index.html":{}}}],["growing",{"_index":1126,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"overview.html":{}}}],["hashing.provider",{"_index":181,"title":{},"body":{"injectables/Argon2Provider.html":{},"injectables/SignInProvider.html":{}}}],["hashingprovider",{"_index":180,"title":{"injectables/HashingProvider.html":{}},"body":{"injectables/Argon2Provider.html":{},"modules/AuthModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashinprovider",{"_index":664,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["hashpassword",{"_index":173,"title":{},"body":{"injectables/Argon2Provider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(data",{"_index":586,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["hashpassword(password",{"_index":178,"title":{},"body":{"injectables/Argon2Provider.html":{}}}],["hello",{"_index":168,"title":{},"body":{"injectables/AppService.html":{}}}],["helps",{"_index":1110,"title":{},"body":{"index.html":{}}}],["high",{"_index":1062,"title":{},"body":{"index.html":{}}}],["host",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["httpcode",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://graph.facebook.com/me?fields=id,name,email,picture&access_token=${facebooktokendto.token",{"_index":443,"title":{},"body":{"injectables/FacebookAuthenticationService.html":{}}}],["httpstatus",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["humorous",{"_index":869,"title":{},"body":{"classes/UserPreferencesDto.html":{},"miscellaneous/enumerations.html":{}}}],["id",{"_index":405,"title":{},"body":{"interfaces/CurrentUser.html":{},"injectables/FacebookAuthenticationService.html":{},"classes/GetOneUserParamDto.html":{},"entities/SocialAccounts.html":{},"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["id.provider",{"_index":941,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["id.provider.ts",{"_index":481,"title":{},"body":{"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"coverage.html":{}}}],["id.provider.ts:17",{"_index":485,"title":{},"body":{"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{}}}],["id.provider.ts:7",{"_index":483,"title":{},"body":{"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{}}}],["identifier",{"_index":544,"title":{},"body":{"classes/GetOneUserParamDto.html":{},"classes/SelectChannelDto.html":{},"coverage.html":{}}}],["identifier'})@isuuid",{"_index":541,"title":{},"body":{"classes/GetOneUserParamDto.html":{}}}],["idtoken",{"_index":573,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["impact",{"_index":1130,"title":{},"body":{"index.html":{}}}],["implements",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/Argon2Provider.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["import",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"classes/FacebookTokenDto.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetAllUsersParamDto.html":{},"classes/GetOneUserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"classes/LinkYoutubeDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPreferencesDTo.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/SocialAccounts.html":{},"controllers/SocialAccountsController.html":{},"modules/SocialAccountsModule.html":{},"injectables/SocialAccountsService.html":{},"entities/User.html":{},"classes/UserPreferencesDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SocialAccountsModule.html":{},"modules/UsersModule.html":{}}}],["in')@httpcode(httpstatus.ok)@auth(authtype.none",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["in.provider",{"_index":242,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["in.provider.ts",{"_index":663,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["in.provider.ts:11",{"_index":665,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["in.provider.ts:48",{"_index":666,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"interfaces/CurrentUser.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"classes/FacebookTokenDto.html":{},"classes/FacebookUser.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetAllUsersParamDto.html":{},"classes/GetOneUserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"classes/LinkYoutubeDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/SocialAccounts.html":{},"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{},"entities/User.html":{},"classes/UserPreferencesDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"interfaces/CurrentUser.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"classes/FacebookTokenDto.html":{},"classes/FacebookUser.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetAllUsersParamDto.html":{},"classes/GetOneUserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"classes/LinkYoutubeDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPreferencesDTo.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/SocialAccounts.html":{},"controllers/SocialAccountsController.html":{},"modules/SocialAccountsModule.html":{},"injectables/SocialAccountsService.html":{},"entities/User.html":{},"classes/UserPreferencesDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":448,"title":{},"body":{"injectables/FacebookAuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["inject",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UsersService.html":{}}}],["inject(jwtconfig.key",{"_index":53,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["injectable",{"_index":38,"title":{"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"injectables/AuthService.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":163,"title":{},"body":{"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"injectables/AuthService.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["injectrepository",{"_index":313,"title":{},"body":{"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(socialaccounts",{"_index":780,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["injectrepository(user",{"_index":317,"title":{},"body":{"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/UsersService.html":{}}}],["instagram",{"_index":1095,"title":{},"body":{"index.html":{}}}],["instance",{"_index":293,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["instanceof",{"_index":393,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["intercept",{"_index":408,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["intercept(context",{"_index":411,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["interface",{"_index":399,"title":{"interfaces/CurrentUser.html":{}},"body":{"interfaces/CurrentUser.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":401,"title":{},"body":{"interfaces/CurrentUser.html":{}}}],["interfaces/current",{"_index":505,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["interfaces/facebook",{"_index":314,"title":{},"body":{"injectables/CreateFacebookUserProvider.html":{},"injectables/UsersService.html":{}}}],["interfaces/google",{"_index":329,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UsersService.html":{}}}],["internalservererrorexception",{"_index":379,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/SignInProvider.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["internalservererrorexception('failed",{"_index":398,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["internalservererrorexception('password",{"_index":677,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["isboolean",{"_index":873,"title":{},"body":{"classes/UserPreferencesDto.html":{}}}],["isemail",{"_index":359,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isenum",{"_index":644,"title":{},"body":{"classes/SelectChannelDto.html":{},"classes/UserPreferencesDto.html":{}}}],["isenum(niche",{"_index":648,"title":{},"body":{"classes/SelectChannelDto.html":{}}}],["isenum(replytone",{"_index":880,"title":{},"body":{"classes/UserPreferencesDto.html":{}}}],["isglobal",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":537,"title":{},"body":{"classes/GetAllUsersParamDto.html":{}}}],["isnotempty",{"_index":360,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FacebookTokenDto.html":{},"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{}}}],["isnumber",{"_index":871,"title":{},"body":{"classes/UserPreferencesDto.html":{}}}],["isoptional",{"_index":361,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetAllUsersParamDto.html":{}}}],["isstring",{"_index":362,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FacebookTokenDto.html":{},"classes/GoogleTokenDto.html":{},"classes/LinkYoutubeDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{}}}],["issued",{"_index":605,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["issuer",{"_index":510,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["isuuid",{"_index":543,"title":{},"body":{"classes/GetOneUserParamDto.html":{}}}],["isverified",{"_index":673,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["items",{"_index":531,"title":{},"body":{"classes/GetAllUsersParamDto.html":{}}}],["john.doe@gmail.com",{"_index":845,"title":{},"body":{"entities/User.html":{}}}],["john.doe@gmail.com'})@column({unique",{"_index":813,"title":{},"body":{"entities/User.html":{}}}],["johndoe",{"_index":846,"title":{},"body":{"entities/User.html":{}}}],["johndoe'})@column",{"_index":839,"title":{},"body":{"entities/User.html":{}}}],["johndoe@example.com",{"_index":654,"title":{},"body":{"classes/SignInDto.html":{}}}],["joi",{"_index":1022,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":831,"title":{},"body":{"entities/User.html":{}}}],["jsonb",{"_index":834,"title":{},"body":{"entities/User.html":{}}}],["jwt",{"_index":563,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["jwtconfig",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["jwtconfiguration",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["jwtmodule",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtservice",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["keep",{"_index":1076,"title":{},"body":{"index.html":{}}}],["keyof",{"_index":1153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lasterror",{"_index":292,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["later",{"_index":799,"title":{},"body":{"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["legend",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SocialAccountsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letter",{"_index":349,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["library",{"_index":562,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["license",{"_index":1143,"title":{},"body":{"properties.html":{}}}],["lifestyle",{"_index":1043,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["limit",{"_index":525,"title":{},"body":{"classes/GetAllUsersParamDto.html":{},"injectables/UsersService.html":{}}}],["link",{"_index":785,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["linked",{"_index":784,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["linkyoutube",{"_index":709,"title":{},"body":{"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{}}}],["linkyoutube(@body",{"_index":745,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["linkyoutube(linkyoutubedto",{"_index":716,"title":{},"body":{"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{}}}],["linkyoutubedto",{"_index":588,"title":{"classes/LinkYoutubeDto.html":{}},"body":{"classes/LinkYoutubeDto.html":{},"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{},"coverage.html":{}}}],["load",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["logger",{"_index":396,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["logging",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":669,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["loginticket",{"_index":571,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginticket.getpayload",{"_index":577,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["long",{"_index":346,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maintain",{"_index":1116,"title":{},"body":{"index.html":{}}}],["major",{"_index":1091,"title":{},"body":{"index.html":{}}}],["makes",{"_index":1097,"title":{},"body":{"index.html":{}}}],["many",{"_index":1068,"title":{},"body":{"index.html":{}}}],["manytoone",{"_index":703,"title":{},"body":{"entities/SocialAccounts.html":{}}}],["manytoone(undefined",{"_index":697,"title":{},"body":{"entities/SocialAccounts.html":{}}}],["map",{"_index":416,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["match",{"_index":637,"title":{},"body":{"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{}}}],["matches",{"_index":363,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":374,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":82,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"interfaces/CurrentUser.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"classes/FacebookTokenDto.html":{},"classes/FacebookUser.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetAllUsersParamDto.html":{},"classes/GetOneUserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"classes/LinkYoutubeDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPreferencesDTo.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/SocialAccounts.html":{},"controllers/SocialAccountsController.html":{},"modules/SocialAccountsModule.html":{},"injectables/SocialAccountsService.html":{},"entities/User.html":{},"classes/UserPreferencesDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":1112,"title":{},"body":{"index.html":{}}}],["max",{"_index":872,"title":{},"body":{"classes/UserPreferencesDto.html":{}}}],["max(3",{"_index":877,"title":{},"body":{"classes/UserPreferencesDto.html":{}}}],["media",{"_index":624,"title":{},"body":{"classes/SelectChannelDto.html":{},"index.html":{}}}],["message",{"_index":343,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SelectChannelDto.html":{},"injectables/SocialAccountsService.html":{},"classes/UserPreferencesDto.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":281,"title":{},"body":{"guards/AuthenticationGuard.html":{},"dependencies.html":{}}}],["methods",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["min",{"_index":538,"title":{},"body":{"classes/GetAllUsersParamDto.html":{},"classes/UserPreferencesDto.html":{}}}],["min(0",{"_index":876,"title":{},"body":{"classes/UserPreferencesDto.html":{}}}],["min(1",{"_index":539,"title":{},"body":{"classes/GetAllUsersParamDto.html":{}}}],["minlength",{"_index":364,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["minlength(3",{"_index":372,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":373,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1030,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":90,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SocialAccountsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SocialAccountsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":92,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SocialAccountsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["multiple",{"_index":1118,"title":{},"body":{"index.html":{}}}],["music",{"_index":1041,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["name",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SelectChannelDto.html":{},"injectables/SignInProvider.html":{},"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["nestinterceptor",{"_index":415,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nestjs",{"_index":395,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["nestjs/common",{"_index":40,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/SocialAccountsController.html":{},"modules/SocialAccountsModule.html":{},"injectables/SocialAccountsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1015,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":371,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FacebookTokenDto.html":{},"classes/GetAllUsersParamDto.html":{},"classes/GetOneUserParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/LinkYoutubeDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPreferencesDTo.html":{},"classes/RefreshTokenDto.html":{},"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"classes/UserPreferencesDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"modules/SocialAccountsModule.html":{},"injectables/SocialAccountsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newchannel",{"_index":789,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["news",{"_index":1040,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["newuser",{"_index":389,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["next",{"_index":412,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":417,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["niche",{"_index":621,"title":{},"body":{"classes/SelectChannelDto.html":{},"entities/SocialAccounts.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["niche.news",{"_index":647,"title":{},"body":{"classes/SelectChannelDto.html":{}}}],["none",{"_index":1038,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notfoundexception",{"_index":437,"title":{},"body":{"injectables/FacebookAuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('invalid",{"_index":446,"title":{},"body":{"injectables/FacebookAuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["notfoundexception('user",{"_index":974,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception(`no",{"_index":783,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["notfoundexception(`user",{"_index":788,"title":{},"body":{"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["null",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["nullable",{"_index":835,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":350,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetAllUsersParamDto.html":{},"classes/UserPreferencesDto.html":{}}}],["oauth",{"_index":463,"title":{},"body":{"classes/FacebookTokenDto.html":{},"classes/GoogleTokenDto.html":{},"classes/LinkYoutubeDto.html":{}}}],["oauth'})@isstring()@isnotempty",{"_index":461,"title":{},"body":{"classes/FacebookTokenDto.html":{},"classes/GoogleTokenDto.html":{}}}],["oauth2client",{"_index":561,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauth2client(clientid",{"_index":570,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauthclient",{"_index":554,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["object.assign(user",{"_index":976,"title":{},"body":{"injectables/UsersService.html":{}}}],["observable",{"_index":274,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["ondelete",{"_index":699,"title":{},"body":{"entities/SocialAccounts.html":{}}}],["one",{"_index":348,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"classes/GetOneUserParamDto.html":{},"classes/SelectChannelDto.html":{},"injectables/SocialAccountsService.html":{},"classes/UserPreferencesDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["onetomany",{"_index":841,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":807,"title":{},"body":{"entities/User.html":{}}}],["onmoduleinit",{"_index":555,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["optional",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetAllUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["order",{"_index":968,"title":{},"body":{"injectables/UsersService.html":{}}}],["original",{"_index":1100,"title":{},"body":{"index.html":{}}}],["out",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SocialAccountsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1135,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":1109,"title":{},"body":{"index.html":{}}}],["package",{"_index":1009,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":526,"title":{},"body":{"classes/GetAllUsersParamDto.html":{},"injectables/UsersService.html":{}}}],["param",{"_index":726,"title":{},"body":{"controllers/SocialAccountsController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["partial",{"_index":829,"title":{},"body":{"entities/User.html":{}}}],["partialtype",{"_index":600,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/PatchUserPreferencesDTo.html":{}}}],["partialtype(createuserdto",{"_index":599,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["partialtype(userpreferencesdto",{"_index":603,"title":{},"body":{"classes/PatchUserPreferencesDTo.html":{}}}],["password",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"injectables/Argon2Provider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{}}}],["passwords",{"_index":670,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["patch",{"_index":906,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('me",{"_index":900,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('preferences",{"_index":903,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser",{"_index":887,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["patchuser(id",{"_index":959,"title":{},"body":{"injectables/UsersService.html":{}}}],["patchuser(user",{"_index":899,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":596,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["patchuserpreferences",{"_index":888,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["patchuserpreferences(id",{"_index":961,"title":{},"body":{"injectables/UsersService.html":{}}}],["patchuserpreferences(user",{"_index":902,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserpreferencesdto",{"_index":601,"title":{"classes/PatchUserPreferencesDTo.html":{}},"body":{"classes/PatchUserPreferencesDTo.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["payload",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["per",{"_index":532,"title":{},"body":{"classes/GetAllUsersParamDto.html":{},"classes/UserPreferencesDto.html":{}}}],["pg",{"_index":1024,"title":{},"body":{"dependencies.html":{}}}],["picture",{"_index":445,"title":{},"body":{"injectables/FacebookAuthenticationService.html":{},"classes/FacebookUser.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleUser.html":{},"entities/User.html":{}}}],["picture.data.url",{"_index":453,"title":{},"body":{"injectables/FacebookAuthenticationService.html":{}}}],["platform",{"_index":627,"title":{},"body":{"classes/SelectChannelDto.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["platforms",{"_index":1094,"title":{},"body":{"index.html":{}}}],["please",{"_index":797,"title":{},"body":{"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["port",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FacebookAuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/SocialAccountsController.html":{},"classes/UserPreferencesDto.html":{},"controllers/UsersController.html":{}}}],["post('refresh",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('sign",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('youtube/link",{"_index":717,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["post('youtube/save",{"_index":723,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["postgres",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["powerful",{"_index":1056,"title":{},"body":{"index.html":{}}}],["predefined",{"_index":638,"title":{},"body":{"classes/SelectChannelDto.html":{}}}],["preferences",{"_index":336,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["preferences.dto",{"_index":367,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserPreferencesDTo.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["preferences.dto.ts",{"_index":602,"title":{},"body":{"classes/PatchUserPreferencesDTo.html":{},"classes/UserPreferencesDto.html":{},"coverage.html":{}}}],["preferences.dto.ts:10",{"_index":861,"title":{},"body":{"classes/UserPreferencesDto.html":{}}}],["preferences.dto.ts:14",{"_index":857,"title":{},"body":{"classes/UserPreferencesDto.html":{}}}],["preferences.dto.ts:22",{"_index":870,"title":{},"body":{"classes/UserPreferencesDto.html":{}}}],["prefix",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FacebookAuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/SocialAccountsController.html":{},"controllers/UsersController.html":{}}}],["presence",{"_index":1117,"title":{},"body":{"index.html":{}}}],["primarygeneratedcolumn",{"_index":704,"title":{},"body":{"entities/SocialAccounts.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":692,"title":{},"body":{"entities/SocialAccounts.html":{},"entities/User.html":{}}}],["private",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["problem",{"_index":1083,"title":{},"body":{"index.html":{}}}],["professional",{"_index":851,"title":{},"body":{"entities/User.html":{},"classes/UserPreferencesDto.html":{},"miscellaneous/enumerations.html":{}}}],["promise",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/Argon2Provider.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":516,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["promise.resolve(instance.canactivate(context",{"_index":294,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["properties",{"_index":267,"title":{"properties.html":{}},"body":{"guards/AuthenticationGuard.html":{},"classes/CreateUserDto.html":{},"interfaces/CurrentUser.html":{},"classes/FacebookTokenDto.html":{},"classes/FacebookUser.html":{},"classes/GetAllUsersParamDto.html":{},"classes/GetOneUserParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"classes/LinkYoutubeDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{},"entities/SocialAccounts.html":{},"entities/User.html":{},"classes/UserPreferencesDto.html":{},"properties.html":{}}}],["provide",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["provided",{"_index":626,"title":{},"body":{"classes/SelectChannelDto.html":{}}}],["providers",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SocialAccountsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/argon2.provider",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/auth.service",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/create",{"_index":937,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/facebook",{"_index":428,"title":{},"body":{"controllers/FacebookAuthenticationController.html":{}}}],["providers/find",{"_index":939,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/generate",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/google",{"_index":549,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["providers/hashing.provider",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/refresh",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/sign",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/social",{"_index":732,"title":{},"body":{"controllers/SocialAccountsController.html":{},"modules/SocialAccountsModule.html":{}}}],["providers/users.service",{"_index":912,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["publish",{"_index":1123,"title":{},"body":{"index.html":{}}}],["publishes",{"_index":1090,"title":{},"body":{"index.html":{}}}],["quality",{"_index":1063,"title":{},"body":{"index.html":{}}}],["query",{"_index":907,"title":{},"body":{"controllers/UsersController.html":{}}}],["reach",{"_index":1119,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":1122,"title":{},"body":{"index.html":{}}}],["record",{"_index":280,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["reellora",{"_index":1080,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":1026,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":271,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["refresh",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtoken",{"_index":515,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtokendto",{"_index":192,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["refreshtokens",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["refreshtokens(@body",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(refreshtokendto",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["refreshtokensprovider",{"_index":231,"title":{"injectables/RefreshTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{},"overview.html":{}}}],["registration",{"_index":658,"title":{},"body":{"classes/SignInDto.html":{}}}],["relations",{"_index":973,"title":{},"body":{"injectables/UsersService.html":{}}}],["relevant",{"_index":1101,"title":{},"body":{"index.html":{}}}],["remove",{"_index":805,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["removeaccount",{"_index":710,"title":{},"body":{"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{}}}],["removeaccount(@param('id",{"_index":753,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["removeaccount(channelid",{"_index":775,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["removeaccount(id",{"_index":719,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["removed",{"_index":803,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["replies",{"_index":866,"title":{},"body":{"classes/UserPreferencesDto.html":{}}}],["replytone",{"_index":850,"title":{},"body":{"entities/User.html":{},"classes/UserPreferencesDto.html":{},"miscellaneous/enumerations.html":{}}}],["replytone.professional",{"_index":862,"title":{},"body":{"classes/UserPreferencesDto.html":{}}}],["repository",{"_index":303,"title":{},"body":{"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["req",{"_index":715,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["req.user.id",{"_index":739,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["request",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/SocialAccountsController.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request[request_user_key",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":832,"title":{},"body":{"entities/User.html":{}}}],["reset",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SocialAccountsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":1066,"title":{},"body":{"index.html":{}}}],["response.interceptor",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["response.interceptor.ts",{"_index":407,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["response.interceptor.ts:11",{"_index":414,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response.interceptor.ts:6",{"_index":410,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["responses",{"_index":879,"title":{},"body":{"classes/UserPreferencesDto.html":{}}}],["responses'})@isenum(replytone",{"_index":867,"title":{},"body":{"classes/UserPreferencesDto.html":{}}}],["results",{"_index":81,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"interfaces/CurrentUser.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"classes/FacebookTokenDto.html":{},"classes/FacebookUser.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetAllUsersParamDto.html":{},"classes/GetOneUserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"classes/LinkYoutubeDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPreferencesDTo.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/SocialAccounts.html":{},"controllers/SocialAccountsController.html":{},"modules/SocialAccountsModule.html":{},"injectables/SocialAccountsService.html":{},"entities/User.html":{},"classes/UserPreferencesDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":593,"title":{},"body":{"classes/LinkYoutubeDto.html":{}}}],["returns",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rxjs",{"_index":275,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"dependencies.html":{}}}],["save",{"_index":794,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["savedchannel",{"_index":791,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["saveyoutubechannel",{"_index":711,"title":{},"body":{"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{}}}],["saveyoutubechannel(@req",{"_index":747,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["saveyoutubechannel(req",{"_index":722,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["saveyoutubechannel(userid",{"_index":777,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["secret",{"_index":512,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["selectchanneldto",{"_index":616,"title":{"classes/SelectChannelDto.html":{}},"body":{"classes/SelectChannelDto.html":{},"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{},"coverage.html":{}}}],["selected",{"_index":623,"title":{},"body":{"classes/SelectChannelDto.html":{}}}],["sent",{"_index":441,"title":{},"body":{"injectables/FacebookAuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["service",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["set",{"_index":657,"title":{},"body":{"classes/SignInDto.html":{}}}],["setmetadata(auth_type_key",{"_index":1150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sign",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signin(@body",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signindto",{"_index":199,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"coverage.html":{}}}],["signinprovider",{"_index":232,"title":{"injectables/SignInProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["signtoken",{"_index":494,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signtoken(userid",{"_index":498,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["skills",{"_index":1065,"title":{},"body":{"index.html":{}}}],["skip",{"_index":966,"title":{},"body":{"injectables/UsersService.html":{}}}],["small",{"_index":1070,"title":{},"body":{"index.html":{}}}],["social",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"classes/SelectChannelDto.html":{},"injectables/SignInProvider.html":{},"controllers/SocialAccountsController.html":{},"modules/SocialAccountsModule.html":{},"injectables/SocialAccountsService.html":{},"index.html":{}}}],["social/facebook",{"_index":251,"title":{},"body":{"modules/AuthModule.html":{}}}],["social/google",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{}}}],["social/providers/facebook",{"_index":252,"title":{},"body":{"modules/AuthModule.html":{}}}],["social/providers/google",{"_index":249,"title":{},"body":{"modules/AuthModule.html":{}}}],["socialacconts",{"_index":779,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["socialaccounts",{"_index":680,"title":{"entities/SocialAccounts.html":{}},"body":{"entities/SocialAccounts.html":{},"modules/SocialAccountsModule.html":{},"injectables/SocialAccountsService.html":{},"entities/User.html":{},"coverage.html":{}}}],["socialaccountscontroller",{"_index":705,"title":{"controllers/SocialAccountsController.html":{}},"body":{"controllers/SocialAccountsController.html":{},"modules/SocialAccountsModule.html":{},"coverage.html":{}}}],["socialaccountsmodule",{"_index":103,"title":{"modules/SocialAccountsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SocialAccountsModule.html":{},"modules.html":{},"overview.html":{}}}],["socialaccountsrepository",{"_index":770,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["socialaccountsservice",{"_index":731,"title":{"injectables/SocialAccountsService.html":{}},"body":{"controllers/SocialAccountsController.html":{},"modules/SocialAccountsModule.html":{},"injectables/SocialAccountsService.html":{},"coverage.html":{},"overview.html":{}}}],["solo",{"_index":1105,"title":{},"body":{"index.html":{}}}],["solve",{"_index":1082,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"interfaces/CurrentUser.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"classes/FacebookTokenDto.html":{},"classes/FacebookUser.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetAllUsersParamDto.html":{},"classes/GetOneUserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"classes/LinkYoutubeDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserPreferencesDTo.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/SocialAccounts.html":{},"controllers/SocialAccountsController.html":{},"modules/SocialAccountsModule.html":{},"injectables/SocialAccountsService.html":{},"entities/User.html":{},"classes/UserPreferencesDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sources",{"_index":1087,"title":{},"body":{"index.html":{}}}],["sourcing",{"_index":1059,"title":{},"body":{"index.html":{}}}],["special",{"_index":351,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["sports",{"_index":1042,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth",{"_index":1032,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.constants.ts",{"_index":1148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../current",{"_index":1149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1050,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../niche.enums.ts",{"_index":1034,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../plateform.enums.ts",{"_index":1035,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../replytone.enums.ts",{"_index":1036,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":86,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":164,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":166,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:21",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:29",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":936,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/config/jwt.config",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["src/auth/constants/auth.constants",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["src/auth/constants/auth.constants.ts",{"_index":995,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/auth.decorator",{"_index":916,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":997,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/current",{"_index":914,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/refresh",{"_index":604,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts",{"_index":649,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts:12",{"_index":656,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dtos/signin.dto.ts:21",{"_index":661,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/enums/auth",{"_index":917,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["src/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication.guard.ts",{"_index":266,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication.guard.ts:13",{"_index":272,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/authentication.guard.ts:35",{"_index":273,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/interfaces/current",{"_index":402,"title":{},"body":{"interfaces/CurrentUser.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/auth/providers/argon2.provider.ts",{"_index":171,"title":{},"body":{"injectables/Argon2Provider.html":{},"coverage.html":{}}}],["src/auth/providers/argon2.provider.ts:13",{"_index":177,"title":{},"body":{"injectables/Argon2Provider.html":{}}}],["src/auth/providers/argon2.provider.ts:8",{"_index":179,"title":{},"body":{"injectables/Argon2Provider.html":{}}}],["src/auth/providers/auth.service",{"_index":963,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:28",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:32",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:9",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/generate",{"_index":439,"title":{},"body":{"injectables/FacebookAuthenticationService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider",{"_index":382,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":582,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:6",{"_index":587,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:8",{"_index":585,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/refresh",{"_index":609,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["src/auth/providers/sign",{"_index":662,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["src/auth/social/dtos/facebook",{"_index":457,"title":{},"body":{"classes/FacebookTokenDto.html":{},"coverage.html":{}}}],["src/auth/social/dtos/google",{"_index":580,"title":{},"body":{"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["src/auth/social/facebook",{"_index":421,"title":{},"body":{"controllers/FacebookAuthenticationController.html":{},"coverage.html":{}}}],["src/auth/social/google",{"_index":545,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["src/auth/social/providers/facebook",{"_index":433,"title":{},"body":{"injectables/FacebookAuthenticationService.html":{},"coverage.html":{}}}],["src/auth/social/providers/google",{"_index":553,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/common/interceptors/data",{"_index":406,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":1001,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/social",{"_index":589,"title":{},"body":{"classes/LinkYoutubeDto.html":{},"classes/SelectChannelDto.html":{},"entities/SocialAccounts.html":{},"controllers/SocialAccountsController.html":{},"modules/SocialAccountsModule.html":{},"injectables/SocialAccountsService.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/users/dtos/create",{"_index":333,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":523,"title":{},"body":{"classes/GetAllUsersParamDto.html":{},"classes/GetOneUserParamDto.html":{},"injectables/SocialAccountsService.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":597,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/PatchUserPreferencesDTo.html":{},"coverage.html":{}}}],["src/users/dtos/user",{"_index":852,"title":{},"body":{"classes/UserPreferencesDto.html":{},"coverage.html":{}}}],["src/users/enums/replytone.enums.ts",{"_index":1048,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/users/interfaces/facebook",{"_index":464,"title":{},"body":{"classes/FacebookUser.html":{},"coverage.html":{}}}],["src/users/interfaces/google",{"_index":581,"title":{},"body":{"classes/GoogleUser.html":{},"coverage.html":{}}}],["src/users/providers/create",{"_index":298,"title":{},"body":{"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["src/users/providers/find",{"_index":470,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/SocialAccountsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":943,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:104",{"_index":953,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:131",{"_index":948,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:136",{"_index":960,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:168",{"_index":962,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:205",{"_index":951,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:234",{"_index":955,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:24",{"_index":947,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:240",{"_index":958,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:246",{"_index":957,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:251",{"_index":950,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:257",{"_index":949,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:72",{"_index":952,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":504,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"entities/SocialAccounts.html":{}}}],["src/users/user.entity.ts",{"_index":806,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:11",{"_index":823,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:15",{"_index":814,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:19",{"_index":840,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:24",{"_index":826,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:29",{"_index":817,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:34",{"_index":816,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:46",{"_index":836,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:51",{"_index":809,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:55",{"_index":828,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:59",{"_index":811,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:63",{"_index":838,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":882,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:24",{"_index":895,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:29",{"_index":898,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:36",{"_index":891,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:41",{"_index":904,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:49",{"_index":901,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:57",{"_index":893,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":238,"title":{},"body":{"modules/AuthModule.html":{},"modules/SocialAccountsModule.html":{}}}],["src/users/users.module.ts",{"_index":934,"title":{},"body":{"modules/UsersModule.html":{}}}],["started",{"_index":1052,"title":{"index.html":{}},"body":{}}],["starting",{"_index":1092,"title":{},"body":{"index.html":{}}}],["statements",{"_index":991,"title":{},"body":{"coverage.html":{}}}],["stored",{"_index":830,"title":{},"body":{"entities/User.html":{}}}],["string",{"_index":167,"title":{},"body":{"injectables/AppService.html":{},"injectables/Argon2Provider.html":{},"classes/CreateUserDto.html":{},"interfaces/CurrentUser.html":{},"classes/FacebookTokenDto.html":{},"classes/FacebookUser.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetOneUserParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"classes/LinkYoutubeDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{},"entities/SocialAccounts.html":{},"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["strongp@ssw0rd",{"_index":659,"title":{},"body":{"classes/SignInDto.html":{}}}],["struggle",{"_index":1075,"title":{},"body":{"index.html":{}}}],["sub",{"_index":404,"title":{},"body":{"interfaces/CurrentUser.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["successfully",{"_index":804,"title":{},"body":{"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["support",{"_index":1132,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1133,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":500,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["table",{"_index":1008,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1007,"title":{},"body":{"coverage.html":{}}}],["tailored",{"_index":1103,"title":{},"body":{"index.html":{}}}],["take",{"_index":967,"title":{},"body":{"injectables/UsersService.html":{}}}],["takes",{"_index":1064,"title":{},"body":{"index.html":{}}}],["tech",{"_index":632,"title":{},"body":{"classes/SelectChannelDto.html":{}}}],["this.accesstokenguard",{"_index":283,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.authservice.refreshtokens(refreshtokendto",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(signindto",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap",{"_index":282,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.authtypeguardmap[type",{"_index":291,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.configservice.get('appconfig.apiversion",{"_index":419,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["this.createfacebookuserprovider.createfacebookuser(facebookuser",{"_index":988,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.creategoogleuserprovider.creategoogleuser(googleuser",{"_index":987,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.createuserprovider.ceateuser(createuserdto",{"_index":975,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.defaultauthtype",{"_index":289,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.extracttokenfromheader(request",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.facebookauthenticationservice.authenticate(facebooktokendto",{"_index":432,"title":{},"body":{"controllers/FacebookAuthenticationController.html":{}}}],["this.findoneuserbyemailprovider.findonebyemail(email",{"_index":984,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findoneuserbyfacebookidprovider.findonebyfacebookid(facebookid",{"_index":986,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findoneuserbygoogleidprovider.findoneuserbygoogleid(googleid",{"_index":985,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.generatetokensprovider.generatetokens(user",{"_index":455,"title":{},"body":{"injectables/FacebookAuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["this.googleauthenticationservice.authenticate(googletokendto",{"_index":552,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.hashingprovider.hashpassword(createuserdto.password",{"_index":391,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.hashinprovider.comparepassword(signindto.password",{"_index":676,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.jwtconfiguration",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtconfiguration.accesstokenttl",{"_index":518,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.audience",{"_index":509,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.googleclientid",{"_index":566,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtconfiguration.googleclientsecret",{"_index":568,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtconfiguration.issuer",{"_index":511,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.refershtokenttl",{"_index":521,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":513,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtservice.signasync",{"_index":507,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtservice.verifyasync(refreshtokendto.refreshtoken",{"_index":613,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.oauthclient",{"_index":569,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.verifyidtoken",{"_index":572,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.reflector.getallandoverride(auth_type_key",{"_index":286,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.refreshtokensprovider.refreshtokens(refreshtokendto",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signinprovider.signin(signindto",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signtoken(user.id",{"_index":520,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.signtoken>(user.id",{"_index":517,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.socialaccountsrepository.create",{"_index":790,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["this.socialaccountsrepository.find",{"_index":782,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["this.socialaccountsrepository.findone",{"_index":800,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["this.socialaccountsrepository.remove(account",{"_index":802,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["this.socialaccountsrepository.save(newchannel",{"_index":792,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["this.socialaccountsservice.getaccounts('b229f0df",{"_index":740,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["this.socialaccountsservice.linkyoutube(linkyoutubedto",{"_index":746,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["this.socialaccountsservice.removeaccount(id",{"_index":754,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["this.socialaccountsservice.saveyoutubechannel('2a3220a6",{"_index":748,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["this.usersrepository.create",{"_index":390,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usersrepository.create(facebookuser",{"_index":318,"title":{},"body":{"injectables/CreateFacebookUserProvider.html":{}}}],["this.usersrepository.create(googleuser",{"_index":330,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["this.usersrepository.findandcount",{"_index":965,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":384,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby",{"_index":486,"title":{},"body":{"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{}}}],["this.usersrepository.remove(user",{"_index":982,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":392,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usersrepository.save(user",{"_index":319,"title":{},"body":{"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/UsersService.html":{}}}],["this.usersservice.ceateuser(createuserdto",{"_index":926,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createfacebookuser",{"_index":452,"title":{},"body":{"injectables/FacebookAuthenticationService.html":{}}}],["this.usersservice.creategoogleuser",{"_index":579,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.deleteuser(getoneuserparamdto",{"_index":930,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findallusers(getallusersparamdto",{"_index":921,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findoneuser(getoneuserparamdto",{"_index":923,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findoneuser(id",{"_index":787,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["this.usersservice.findoneuser(sub",{"_index":614,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["this.usersservice.findoneuserbyemail(signindto.email",{"_index":667,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.usersservice.findoneuserbyfacebookid(facebookid",{"_index":451,"title":{},"body":{"injectables/FacebookAuthenticationService.html":{}}}],["this.usersservice.findoneuserbygoogleid(googleid",{"_index":578,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.patchuser(user.sub",{"_index":928,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.patchuserpreferences(user.sub",{"_index":927,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["tiktok",{"_index":1047,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["time",{"_index":796,"title":{},"body":{"injectables/SocialAccountsService.html":{},"index.html":{}}}],["today’s",{"_index":1053,"title":{},"body":{"index.html":{}}}],["todo",{"_index":736,"title":{},"body":{"controllers/SocialAccountsController.html":{}}}],["todo:use",{"_index":394,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["token",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FacebookAuthenticationService.html":{},"classes/FacebookTokenDto.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{}}}],["token.dto",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["token.dto.ts",{"_index":458,"title":{},"body":{"classes/FacebookTokenDto.html":{},"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:10",{"_index":608,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.dto.ts:8",{"_index":462,"title":{},"body":{"classes/FacebookTokenDto.html":{},"classes/GoogleTokenDto.html":{}}}],["token.guard",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:24",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:49",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:9",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["tokens",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["tokens')@httpcode(httpstatus.ok)@auth(authtype.none",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens.provider",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["tokens.provider.ts",{"_index":492,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["tokens.provider.ts:10",{"_index":610,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:30",{"_index":501,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:37",{"_index":611,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:46",{"_index":497,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:9",{"_index":495,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tone",{"_index":865,"title":{},"body":{"classes/UserPreferencesDto.html":{}}}],["tool",{"_index":1085,"title":{},"body":{"index.html":{}}}],["total",{"_index":964,"title":{},"body":{"injectables/UsersService.html":{}}}],["transformer",{"_index":368,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"dependencies.html":{}}}],["true",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"entities/SocialAccounts.html":{},"entities/User.html":{},"classes/UserPreferencesDto.html":{}}}],["try",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["turning",{"_index":1128,"title":{},"body":{"index.html":{}}}],["type",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/Argon2Provider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"interfaces/CurrentUser.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"classes/FacebookTokenDto.html":{},"classes/FacebookUser.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetAllUsersParamDto.html":{},"classes/GetOneUserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"classes/LinkYoutubeDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/SocialAccounts.html":{},"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{},"entities/User.html":{},"classes/UserPreferencesDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["type.enum.ts",{"_index":1033,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typeorm",{"_index":312,"title":{},"body":{"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"entities/SocialAccounts.html":{},"injectables/SocialAccountsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/SocialAccountsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([socialaccounts",{"_index":766,"title":{},"body":{"modules/SocialAccountsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":942,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["uc_x5xg1ov2p6uzz5fsm9ttw",{"_index":646,"title":{},"body":{"classes/SelectChannelDto.html":{}}}],["uc_x5xg1ov2p6uzz5fsm9ttw'})@isstring()@isnotempty",{"_index":629,"title":{},"body":{"classes/SelectChannelDto.html":{}}}],["unable",{"_index":795,"title":{},"body":{"injectables/SocialAccountsService.html":{}}}],["unauthorizedexception",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["unauthorizedexception('authentication",{"_index":295,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["unauthorizedexception('authorization",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["unauthorizedexception('invalid",{"_index":476,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/SignInProvider.html":{}}}],["unauthorizedexception('jwt",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["unauthorizedexception(error",{"_index":615,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["undefined",{"_index":864,"title":{},"body":{"classes/UserPreferencesDto.html":{},"miscellaneous/variables.html":{}}}],["undefined})@isenum(niche",{"_index":641,"title":{},"body":{"classes/SelectChannelDto.html":{}}}],["unique",{"_index":622,"title":{},"body":{"classes/SelectChannelDto.html":{},"entities/SocialAccounts.html":{},"entities/User.html":{}}}],["unknown",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"controllers/FacebookAuthenticationController.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1144,"title":{},"body":{"properties.html":{}}}],["up",{"_index":1077,"title":{},"body":{"index.html":{}}}],["update",{"_index":979,"title":{},"body":{"injectables/UsersService.html":{}}}],["updated",{"_index":978,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatedat",{"_index":684,"title":{},"body":{"entities/SocialAccounts.html":{},"entities/User.html":{}}}],["updatedatecolumn",{"_index":695,"title":{},"body":{"entities/SocialAccounts.html":{},"entities/User.html":{}}}],["updateduser",{"_index":977,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateduser.preferences",{"_index":981,"title":{},"body":{"injectables/UsersService.html":{}}}],["uploads",{"_index":859,"title":{},"body":{"classes/UserPreferencesDto.html":{}}}],["useclass",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["usefactory",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["useinterceptors",{"_index":908,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":924,"title":{},"body":{"controllers/UsersController.html":{}}}],["user",{"_index":310,"title":{"entities/User.html":{}},"body":{"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"interfaces/CurrentUser.html":{},"injectables/FacebookAuthenticationService.html":{},"classes/FacebookTokenDto.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/PatchUserPreferencesDTo.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/SocialAccounts.html":{},"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":652,"title":{},"body":{"classes/SignInDto.html":{}}}],["user.channels",{"_index":698,"title":{},"body":{"entities/SocialAccounts.html":{}}}],["user.dto",{"_index":381,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"injectables/SocialAccountsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":334,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetOneUserParamDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":338,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:16",{"_index":358,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:25",{"_index":353,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:31",{"_index":356,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:9",{"_index":542,"title":{},"body":{"classes/GetOneUserParamDto.html":{}}}],["user.email",{"_index":519,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["user.entity",{"_index":311,"title":{},"body":{"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.interface",{"_index":315,"title":{},"body":{"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.interface.ts",{"_index":403,"title":{},"body":{"interfaces/CurrentUser.html":{},"classes/FacebookUser.html":{},"classes/GoogleUser.html":{},"coverage.html":{}}}],["user.interface.ts:2",{"_index":465,"title":{},"body":{"classes/FacebookUser.html":{},"classes/GoogleUser.html":{}}}],["user.interface.ts:3",{"_index":468,"title":{},"body":{"classes/FacebookUser.html":{},"classes/GoogleUser.html":{}}}],["user.interface.ts:4",{"_index":466,"title":{},"body":{"classes/FacebookUser.html":{},"classes/GoogleUser.html":{}}}],["user.interface.ts:5",{"_index":467,"title":{},"body":{"classes/FacebookUser.html":{},"classes/GoogleUser.html":{}}}],["user.password",{"_index":671,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.preferences",{"_index":980,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.provider",{"_index":938,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.provider.ts",{"_index":300,"title":{},"body":{"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["user.provider.ts:19",{"_index":308,"title":{},"body":{"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{}}}],["user.provider.ts:28",{"_index":378,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:8",{"_index":326,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["user.provider.ts:9",{"_index":304,"title":{},"body":{"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateUserProvider.html":{}}}],["user?.[field",{"_index":1156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":502,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/SocialAccountsService.html":{}}}],["username",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"injectables/FacebookAuthenticationService.html":{},"classes/FacebookUser.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleUser.html":{},"entities/User.html":{}}}],["userpreferencesdto",{"_index":354,"title":{"classes/UserPreferencesDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserPreferencesDTo.html":{},"entities/User.html":{},"classes/UserPreferencesDto.html":{},"coverage.html":{}}}],["users",{"_index":491,"title":{},"body":{"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":935,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.dto",{"_index":910,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.dto.ts",{"_index":524,"title":{},"body":{"classes/GetAllUsersParamDto.html":{},"coverage.html":{}}}],["users.dto.ts:15",{"_index":534,"title":{},"body":{"classes/GetAllUsersParamDto.html":{}}}],["users.dto.ts:9",{"_index":536,"title":{},"body":{"classes/GetAllUsersParamDto.html":{}}}],["users.length",{"_index":970,"title":{},"body":{"injectables/UsersService.html":{}}}],["users/users.module",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":881,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":104,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SocialAccountsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":305,"title":{},"body":{"injectables/CreateFacebookUserProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/FindOneUserByFacebookIdProvider.html":{},"injectables/FindOneUserByGoogleIdProvider.html":{},"injectables/UsersService.html":{}}}],["usersservice",{"_index":256,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/FacebookAuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/SocialAccountsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":450,"title":{},"body":{"injectables/FacebookAuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{}}}],["valid",{"_index":642,"title":{},"body":{"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{}}}],["validatenested",{"_index":365,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validationschema",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":366,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FacebookTokenDto.html":{},"classes/GetAllUsersParamDto.html":{},"classes/GetOneUserParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/LinkYoutubeDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SelectChannelDto.html":{},"classes/SignInDto.html":{},"classes/UserPreferencesDto.html":{},"dependencies.html":{}}}],["value",{"_index":528,"title":{},"body":{"classes/GetAllUsersParamDto.html":{},"classes/SelectChannelDto.html":{},"classes/UserPreferencesDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":640,"title":{},"body":{"classes/SelectChannelDto.html":{}}}],["variable",{"_index":996,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1146,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["verify",{"_index":440,"title":{},"body":{"injectables/FacebookAuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["version",{"_index":1141,"title":{},"body":{"properties.html":{}}}],["via",{"_index":460,"title":{},"body":{"classes/FacebookTokenDto.html":{},"classes/GoogleTokenDto.html":{}}}],["video",{"_index":1055,"title":{},"body":{"index.html":{}}}],["videos",{"_index":1102,"title":{},"body":{"index.html":{}}}],["void",{"_index":560,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["way",{"_index":1057,"title":{},"body":{"index.html":{}}}],["whether",{"_index":854,"title":{},"body":{"classes/UserPreferencesDto.html":{},"index.html":{}}}],["wider",{"_index":1120,"title":{},"body":{"index.html":{}}}],["witty",{"_index":868,"title":{},"body":{"classes/UserPreferencesDto.html":{},"miscellaneous/enumerations.html":{}}}],["world",{"_index":169,"title":{},"body":{"injectables/AppService.html":{},"classes/SelectChannelDto.html":{},"index.html":{}}}],["world'})@isstring()@isnotempty",{"_index":633,"title":{},"body":{"classes/SelectChannelDto.html":{}}}],["yes",{"_index":503,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["youtube",{"_index":786,"title":{},"body":{"injectables/SocialAccountsService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["youtube.dto",{"_index":728,"title":{},"body":{"controllers/SocialAccountsController.html":{},"injectables/SocialAccountsService.html":{}}}],["youtube.dto.ts",{"_index":591,"title":{},"body":{"classes/LinkYoutubeDto.html":{},"coverage.html":{}}}],["youtube.dto.ts:7",{"_index":595,"title":{},"body":{"classes/LinkYoutubeDto.html":{}}}],["you’re",{"_index":1104,"title":{},"body":{"index.html":{}}}],["z\\d",{"_index":342,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&#])[a",{"_index":341,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":340,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SocialAccountsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/access-token/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/access-token/access-token.guard.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Inject, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { type ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { REQUEST_USER_KEY } from 'src/auth/constants/auth.constants';\n\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n\n  constructor(\n    /**\n     * Injecting jwtService\n     */\n    private readonly jwtService: JwtService,\n\n    /**\n     * Injecting jwtConfiguration\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType\n  ) { }\n\n  async canActivate(\n    context: ExecutionContext,\n  ): Promise {\n\n    const request = context.switchToHttp().getRequest()\n\n    const token = this.extractTokenFromHeader(request);\n\n    if (!token) {\n      throw new UnauthorizedException('Authorization token not found')\n    }\n\n    try {\n      const payload = await this.jwtService.verifyAsync(token, this.jwtConfiguration)\n\n      request[REQUEST_USER_KEY] = payload;\n\n      return true;\n\n    } catch (error) {\n      throw new UnauthorizedException('JWT verification error:', error.message);\n    }\n\n  }\n\n  private extractTokenFromHeader(request: Request) {\n    const authHeader = request.headers.authorization\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return null;\n    }\n    return authHeader.split(' ')[1];\n  }\n\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) { }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nSocialAccountsModule\n\nSocialAccountsModule\n\nAppModule -->\n\nSocialAccountsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            SocialAccountsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { SocialAccountsModule } from './social-accounts/social-accounts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport databaseConfig from './config/database.config';\nimport envValidation from './config/env.validation';\nimport jwtConfig from './auth/config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { AccessTokenGuard } from './auth/guards/access-token/access-token.guard';\nimport { AuthenticationGuard } from './auth/guards/authentication.guard';\nimport { DataResponseInterceptor } from './common/interceptors/data-response.interceptor';\n\n@Module({\n  imports: [UsersModule, SocialAccountsModule, AuthModule, ConfigModule.forRoot({\n    isGlobal: true,\n    load: [databaseConfig],\n    envFilePath: '',\n    validationSchema: envValidation\n  }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('database.host'),\n        port: configService.get('database.port'),\n        username: configService.get('database.username'),\n        password: configService.get('database.password'),\n        database: configService.get('database.database'),\n        synchronize: configService.get('database.synchronize'),\n        autoLoadEntities: configService.get('database.autoLoadEntities'),\n        // logging: true\n      })\n    }),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider())\n  ],\n  controllers: [AppController],\n  providers: [AppService,\n    {\n      provide: APP_GUARD,\n      useClass: AuthenticationGuard\n    },\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: DataResponseInterceptor\n    },\n    AccessTokenGuard,\n  ],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Argon2Provider.html":{"url":"injectables/Argon2Provider.html","title":"injectable - Argon2Provider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Argon2Provider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/argon2.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                comparePassword\n                            \n                            \n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(password: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/argon2.provider.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(password: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/argon2.provider.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HashingProvider } from './hashing.provider';\nimport * as argon2 from 'argon2'\n\n@Injectable()\nexport class Argon2Provider implements HashingProvider {\n\n    async hashPassword(password: string | Buffer): Promise {\n\n        return argon2.hash(password);\n    }\n\n    async comparePassword(password: string | Buffer, encrypted: string): Promise {\n\n        return argon2.verify(encrypted, password);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                refreshTokens\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh-tokens')@HttpCode(HttpStatus.OK)@Auth(AuthType.None)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('sign-in')@HttpCode(HttpStatus.OK)@Auth(AuthType.None)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { SignInDto } from './dtos/signin.dto';\nimport { Auth } from './decorators/auth.decorator';\nimport { AuthType } from './enums/auth-type.enum';\nimport { RefreshTokenDto } from './dtos/refresh-token.dto';\n\n@Controller('auth')\nexport class AuthController {\n    constructor(\n        /**\n         * Injecting Auth Service\n         */\n        private readonly authService: AuthService\n    ) { }\n\n\n    @Post('sign-in')\n    @HttpCode(HttpStatus.OK)\n    @Auth(AuthType.None)\n    async signIn(@Body() signInDto: SignInDto) {\n\n        return this.authService.signIn(signInDto)\n    }\n\n    @Post('refresh-tokens')\n    @HttpCode(HttpStatus.OK)\n    @Auth(AuthType.None)\n    async refreshTokens(@Body() refreshTokenDto: RefreshTokenDto) {\n\n        return this.authService.refreshTokens(refreshTokenDto)\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nFacebookAuthenticationService\n\nFacebookAuthenticationService\n\nAuthModule -->\n\nFacebookAuthenticationService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            FacebookAuthenticationService\n                        \n                        \n                            GenerateTokensProvider\n                        \n                        \n                            GoogleAuthenticationService\n                        \n                        \n                            RefreshTokensProvider\n                        \n                        \n                            SignInProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            GoogleAuthenticationController\n                        \n                        \n                            FacebookAuthenticationController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { Argon2Provider } from './providers/argon2.provider';\nimport { SignInProvider } from './providers/sign-in.provider';\nimport { ConfigModule } from '@nestjs/config';\nimport jwtConfig from './config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { GenerateTokensProvider } from './providers/generate-tokens.provider';\nimport { RefreshTokensProvider } from './providers/refresh-tokens.provider';\nimport { GoogleAuthenticationController } from './social/google-authentication.controller';\nimport { GoogleAuthenticationService } from './social/providers/google-authentication.service';\nimport { FacebookAuthenticationController } from './social/facebook-authentication.controller';\nimport { FacebookAuthenticationService } from './social/providers/facebook-authentication.service';\n\n@Module({\n  controllers: [AuthController, GoogleAuthenticationController, FacebookAuthenticationController],\n  providers: [AuthService, {\n    provide: HashingProvider,\n    useClass: Argon2Provider\n  }, SignInProvider, GenerateTokensProvider, RefreshTokensProvider, GoogleAuthenticationService, FacebookAuthenticationService\n  ],\n  imports: [forwardRef(() => UsersModule),\n  ConfigModule.forFeature(jwtConfig),\n  JwtModule.registerAsync(jwtConfig.asProvider())\n  ],\n  exports: [AuthService, HashingProvider]\n})\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Public\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, signInProvider: SignInProvider, refreshTokensProvider: RefreshTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        signInProvider\n                                                  \n                                                        \n                                                                        SignInProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokensProvider\n                                                  \n                                                        \n                                                                        RefreshTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { SignInDto } from '../dtos/signin.dto';\nimport { SignInProvider } from './sign-in.provider';\nimport { RefreshTokensProvider } from './refresh-tokens.provider';\nimport { RefreshTokenDto } from '../dtos/refresh-token.dto';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        /**\n         * Injecting usersService\n         */\n        @Inject(forwardRef(() => UsersService))\n        private readonly usersService: UsersService,\n\n        /**\n         * Injecting signInProvider\n         */\n        private readonly signInProvider: SignInProvider,\n\n        /**\n         * Injecting refreshTokensProvider\n         */\n        private readonly refreshTokensProvider: RefreshTokensProvider,\n    ) { }\n\n    public signIn(signInDto: SignInDto) {\n        return this.signInProvider.signIn(signInDto)\n    }\n\n    public async refreshTokens(refreshTokenDto: RefreshTokenDto) {\n        return this.refreshTokensProvider.refreshTokens(refreshTokenDto)\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/authentication.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/authentication.guard.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { AccessTokenGuard } from './access-token/access-token.guard';\nimport { AuthType } from '../enums/auth-type.enum';\nimport { AUTH_TYPE_KEY } from '../constants/auth.constants';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n\n  private readonly defaultAuthType = AuthType.Bearer\n\n  private readonly authTypeGuardMap: Record;\n\n  constructor(\n    /**\n     * Injecting the reflector class to access metadata\n     */\n    private readonly reflector: Reflector,\n\n    /**\n     * Injecting the accessTokenGuard\n     */\n    private readonly accessTokenGuard: AccessTokenGuard\n\n  ) {\n\n    this.authTypeGuardMap = {\n      [AuthType.Bearer]: this.accessTokenGuard,\n      [AuthType.None]: { canActivate: () => true },\n    };\n\n  }\n\n  async canActivate(\n    context: ExecutionContext,\n  ): Promise {\n\n    const authTypes = this.reflector.getAllAndOverride(AUTH_TYPE_KEY, [context.getHandler(), context.getClass()])\n      ?? [this.defaultAuthType]\n\n    const guards = authTypes.map((type) => this.authTypeGuardMap[type]);\n\n    let lastError: unknown\n\n    for (const instance of guards) {\n      try {\n        const canActivate = await Promise.resolve(instance.canActivate(context))\n\n        if (canActivate) {\n          return true\n        }\n      } catch (error) {\n        lastError = error\n      }\n\n    }\n\n    throw lastError || new UnauthorizedException('Authentication failed');\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateFacebookUserProvider.html":{"url":"injectables/CreateFacebookUserProvider.html","title":"injectable - CreateFacebookUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateFacebookUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-facebook-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createFacebookUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-facebook-user.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createFacebookUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createFacebookUser(faceBookUser: FacebookUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-facebook-user.provider.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                faceBookUser\n                                            \n                                                            FacebookUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { User } from '../user.entity';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FacebookUser } from '../interfaces/facebook-user.interface';\nimport { error } from 'console';\n\n@Injectable()\nexport class CreateFacebookUserProvider {\n\n    constructor(\n        /**\n         * Injecting usersRepository\n         */\n        @InjectRepository(User)\n        private readonly usersRepository: Repository\n    ) { }\n\n    public async createFacebookUser(faceBookUser: FacebookUser) {\n\n        try {\n            const user = this.usersRepository.create(faceBookUser);\n            return await this.usersRepository.save(user)\n\n        } catch (error) { }\n\n        throw new ConflictException(error, { description: 'Could not create user' })\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateGoogleUserProvider.html":{"url":"injectables/CreateGoogleUserProvider.html","title":"injectable - CreateGoogleUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateGoogleUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-google-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-google-user.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-google-user.provider.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { GoogleUser } from '../interfaces/google-user.interface';\n\n@Injectable()\nexport class CreateGoogleUserProvider {\n\n    constructor(\n        /**\n         * Injecting usersRepository\n         */\n        @InjectRepository(User)\n        private readonly usersRepository: Repository\n    ) { }\n\n\n    public async createGoogleUser(googleUser: GoogleUser) {\n        try {\n            const user = this.usersRepository.create(googleUser);\n            return await this.usersRepository.save(user)\n\n        } catch (error) {\n            throw new ConflictException(error, { description: 'Could not create user' })\n        }\n\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                preferences\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(8)@IsNotEmpty()@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&#])[A-Za-z\\d@$!%*?&#]+$/, {message: 'Password must be at least 8 characters long, contain at least one letter, one number, and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        preferences\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserPreferencesDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(3)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsOptional, IsString, Matches, MinLength, ValidateNested } from \"class-validator\";\nimport { UserPreferencesDto } from \"./user-preferences.dto\";\nimport { Type } from \"class-transformer\";\nimport { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class CreateUserDto {\n    @ApiProperty()\n    @IsEmail()\n    @IsNotEmpty()\n    email: string;\n\n    @ApiProperty()\n    @IsString()\n    @MinLength(3)\n    @IsNotEmpty()\n    userName: string;\n\n    @ApiProperty()\n    @IsString()\n    @MinLength(8)\n    @IsNotEmpty()\n    @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&#])[A-Za-z\\d@$!%*?&#]+$/, {\n        message: 'Password must be at least 8 characters long, contain at least one letter, one number, and one special character',\n    })\n    password: string;\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => UserPreferencesDto)\n    preferences?: UserPreferencesDto\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                ceateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, hashingProvider: HashingProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-user.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        ceateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    ceateUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-user.provider.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, forwardRef, Inject, Injectable, InternalServerErrorException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\n\n@Injectable()\nexport class CreateUserProvider {\n\n    constructor(\n\n        /**\n         * Injecting usersRepository\n         */\n        @InjectRepository(User)\n        private readonly usersRepository: Repository,\n\n        /**\n         * Injecting hashingProvider\n         */\n        @Inject(forwardRef(() => HashingProvider))\n        private readonly hashingProvider: HashingProvider\n\n    ) { }\n\n\n    public async ceateUser(createUserDto: CreateUserDto): Promise {\n\n        try {\n            const existingUser = await this.usersRepository.findOne({\n                where: { email: createUserDto.email },\n            })\n\n            if (existingUser) {\n                throw new ConflictException('A user with this email already exists.')\n            }\n\n            let newUser = this.usersRepository.create({\n                ...createUserDto,\n                password: await this.hashingProvider.hashPassword(createUserDto.password)\n            });\n            newUser = await this.usersRepository.save(newUser)\n            return newUser;\n\n        } catch (error) {\n            if (error instanceof ConflictException) {\n                throw error;\n            }\n\n            // Todo:Use NestJS logger \n            console.error('Failed to create user:', error);\n\n            throw new InternalServerErrorException('Failed to create user.');\n\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CurrentUser.html":{"url":"interfaces/CurrentUser.html","title":"interface - CurrentUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CurrentUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/current-user.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CurrentUser {\n    // Id of the user \n    sub: string\n    // email of the user \n    email: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataResponseInterceptor.html":{"url":"injectables/DataResponseInterceptor.html","title":"injectable - DataResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/data-response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/data-response.interceptor.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/data-response.interceptor.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CallHandler, ExecutionContext, Injectable, NestInterceptor } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { map, Observable } from 'rxjs';\n\n@Injectable()\nexport class DataResponseInterceptor implements NestInterceptor {\n  constructor(\n    private readonly configService: ConfigService\n  ) { }\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n\n    return next.handle().pipe(map((data) => ({\n      apiVersion: this.configService.get('appConfig.apiVersion'),\n      data: data\n    })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FacebookAuthenticationController.html":{"url":"controllers/FacebookAuthenticationController.html","title":"controller - FacebookAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FacebookAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/facebook-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                facebook-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    Async\n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(facebookTokenDto: FacebookTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/social/facebook-authentication.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                facebookTokenDto\n                                            \n                                                            FacebookTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { FacebookAuthenticationService } from './providers/facebook-authentication.service';\nimport { FacebookTokenDto } from './dtos/facebook-token.dto';\n\n@Controller('facebook-authentication')\nexport class FacebookAuthenticationController {\n    constructor(\n        /**\n         * Injecting facebookAuthenticationService\n         */\n        private readonly facebookAuthenticationService: FacebookAuthenticationService\n    ) { }\n\n    @Post()\n    public async authenticate(@Body() facebookTokenDto: FacebookTokenDto) {\n        return this.facebookAuthenticationService.authenticate(facebookTokenDto)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FacebookAuthenticationService.html":{"url":"injectables/FacebookAuthenticationService.html","title":"injectable - FacebookAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FacebookAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/providers/facebook-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, generateTokensProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/social/providers/facebook-authentication.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(facebookTokenDto: FacebookTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/facebook-authentication.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                facebookTokenDto\n                                            \n                                                            FacebookTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, NotFoundException } from '@nestjs/common';\nimport axios from 'axios';\nimport { FacebookTokenDto } from '../dtos/facebook-token.dto';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { GenerateTokensProvider } from 'src/auth/providers/generate-tokens.provider';\n\n@Injectable()\nexport class FacebookAuthenticationService {\n\n    constructor(\n        /**\n         * Injecting usersService \n         */\n        @Inject(forwardRef(() => UsersService))\n        private readonly usersService: UsersService,\n\n        /**\n         * Injecting generateTokensProvider \n         */\n        private readonly generateTokensProvider: GenerateTokensProvider,\n    ) { }\n\n    public async authenticate(facebookTokenDto: FacebookTokenDto) {\n\n        try {\n            // Verify the Facebook token sent by the user\n            const { data } = await axios.get(\n                `https://graph.facebook.com/me?fields=id,name,email,picture&access_token=${facebookTokenDto.token}`,\n            );\n            const { id: facebookId, email, name: userName, picture } = data\n\n            if (!email || !facebookId) {\n                throw new NotFoundException('Invalid Facebook account information');\n            }\n\n            //Find user in the database using facebookId\n            let user = await this.usersService.findOneUserByFacebookId(facebookId);\n\n            if (!user) {\n                user = await this.usersService.createFacebookUser({\n                    email,\n                    userName,\n                    facebookId,\n                    picture: picture.data.url,\n                })\n            }\n\n            // Return generated tokens\n            return this.generateTokensProvider.generateTokens(user!);\n\n            //create user if not found and return token\n        } catch (error) {\n\n            throw new NotFoundException('Invalid or expired Facebook token');\n        }\n\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FacebookTokenDto.html":{"url":"classes/FacebookTokenDto.html","title":"class - FacebookTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FacebookTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/dtos/facebook-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Authenticate a user via Facebook OAuth'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/social/dtos/facebook-token.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class FacebookTokenDto {\n    @ApiProperty({ description: 'Authenticate a user via Facebook OAuth' })\n    @IsString()\n    @IsNotEmpty()\n    token: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FacebookUser.html":{"url":"classes/FacebookUser.html","title":"class - FacebookUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FacebookUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/facebook-user.interface.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                facebookId\n                            \n                            \n                                picture\n                            \n                            \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/interfaces/facebook-user.interface.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        facebookId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/interfaces/facebook-user.interface.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/interfaces/facebook-user.interface.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/interfaces/facebook-user.interface.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class FacebookUser {\n    email: string;\n    userName: string;\n    facebookId: string;\n    picture: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneUserByEmailProvider.html":{"url":"injectables/FindOneUserByEmailProvider.html","title":"injectable - FindOneUserByEmailProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneUserByEmailProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-user-by-email.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-user-by-email.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-user-by-email.provider.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, InternalServerErrorException, UnauthorizedException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindOneUserByEmailProvider {\n\n    constructor(\n\n        /**\n         * Injecting usersRepository\n         */\n        @InjectRepository(User)\n        private readonly usersRepository: Repository\n    ) { }\n\n    public async findOneByEmail(email: string): Promise {\n\n        try {\n            const user = await this.usersRepository.findOne({\n                where: { email },\n            });\n\n            if (!user) {\n                throw new UnauthorizedException('Invalid Credentials')\n            }\n\n            return user\n        } catch (error) {\n            if (error instanceof UnauthorizedException) {\n                throw error\n            }\n\n            // Todo:Use NestJS logger \n            console.error('Error finding user:', error);\n\n            throw new InternalServerErrorException('Failed to find user.');\n\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneUserByFacebookIdProvider.html":{"url":"injectables/FindOneUserByFacebookIdProvider.html","title":"injectable - FindOneUserByFacebookIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneUserByFacebookIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-user-by-facebook-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByFacebookId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-user-by-facebook-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByFacebookId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByFacebookId(facebookId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-user-by-facebook-id.provider.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                facebookId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindOneUserByFacebookIdProvider {\n\n    constructor(\n        /**\n         * Injecting usersRepository\n         */\n        @InjectRepository(User)\n        private readonly usersRepository: Repository\n    ) { }\n\n    public async findOneByFacebookId(facebookId: string) {\n\n        return this.usersRepository.findOneBy({ facebookId })\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneUserByGoogleIdProvider.html":{"url":"injectables/FindOneUserByGoogleIdProvider.html","title":"injectable - FindOneUserByGoogleIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneUserByGoogleIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-user-by-google-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneUserByGoogleId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-user-by-google-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneUserByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneUserByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-user-by-google-id.provider.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindOneUserByGoogleIdProvider {\n\n    constructor(\n        /**\n         * Injecting Users Repository\n         */\n        @InjectRepository(User)\n        private readonly usersRepository: Repository,\n    ) { }\n\n    public async findOneUserByGoogleId(googleId: string) {\n        return await this.usersRepository.findOneBy({ googleId })\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokensProvider.html":{"url":"injectables/GenerateTokensProvider.html","title":"injectable - GenerateTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTokens\n                            \n                            \n                                    Public\n                                    Async\n                                signToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-tokens.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    signToken(userId: string, expiresIn: number, payload?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:30\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService, type ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from '../config/jwt.config';\nimport { User } from 'src/users/user.entity';\nimport { CurrentUser } from '../interfaces/current-user.interface';\n\n@Injectable()\nexport class GenerateTokensProvider {\n\n    constructor(\n        /**\n        * Injecting jwtService\n        */\n        private readonly jwtService: JwtService,\n\n        /**\n         * Injecting jwtConfiguration\n         */\n        @Inject(jwtConfig.KEY)\n        private readonly jwtConfiguration: ConfigType,\n\n        /**\n         * Injecting cofigService \n         */\n        private readonly configService: ConfigService\n\n    ) { }\n\n    public async signToken(userId: string, expiresIn: number, payload?: T) {\n\n        return await this.jwtService.signAsync(\n            {\n                sub: userId,\n                ...payload\n            },\n            {\n                audience: this.jwtConfiguration.audience,\n                issuer: this.jwtConfiguration.issuer,\n                secret: this.jwtConfiguration.secret,\n                expiresIn,\n            }\n        )\n    }\n\n    public async generateTokens(user: User) {\n\n        const [accessToken, refreshToken] = await Promise.all([\n            this.signToken>(user.id, this.jwtConfiguration.accessTokenTtl, { email: user.email }),\n\n            this.signToken(user.id, this.jwtConfiguration.refershTokenTtl)\n        ])\n\n        return { accessToken, refreshToken }\n\n    }\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAllUsersParamDto.html":{"url":"classes/GetAllUsersParamDto.html","title":"class - GetAllUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAllUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Items per page (default: 10)'})@IsOptional()@IsInt()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Page number (default: 1)'})@IsOptional()@IsInt()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsInt, IsOptional, Min, } from \"class-validator\";\n\nexport class GetAllUsersParamDto {\n    @ApiPropertyOptional({ description: 'Page number (default: 1)' })\n    @IsOptional()\n    @IsInt()\n    @Min(1)\n    page?: number = 1\n\n    @ApiPropertyOptional({ description: 'Items per page (default: 10)' })\n    @IsOptional()\n    @IsInt()\n    @Min(1)\n    limit?: number = 10;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetOneUserParamDto.html":{"url":"classes/GetOneUserParamDto.html","title":"class - GetOneUserParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetOneUserParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-one-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'string identifier'})@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-one-user.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsUUID } from \"class-validator\";\n\nexport class GetOneUserParamDto {\n    @ApiProperty({\n        description: 'string identifier'\n    })\n    @IsUUID()\n    id: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleAuthenticationController.html":{"url":"controllers/GoogleAuthenticationController.html","title":"controller - GoogleAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/google-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                google-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    Async\n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/social/google-authentication.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { GoogleAuthenticationService } from './providers/google-authentication.service';\nimport { GoogleTokenDto } from './dtos/google-token.dto';\nimport { AuthType } from '../enums/auth-type.enum';\nimport { Auth } from '../decorators/auth.decorator';\n\n@Auth(AuthType.None)\n@Controller('google-authentication')\nexport class GoogleAuthenticationController {\n\n    constructor(\n        /**\n         * Injecting googleAuthenticationService\n         */\n        private readonly googleAuthenticationService: GoogleAuthenticationService\n    ) { }\n\n    @Post()\n    public async authenticate(@Body() googleTokenDto: GoogleTokenDto) {\n        return await this.googleAuthenticationService.authenticate(googleTokenDto)\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthenticationService.html":{"url":"injectables/GoogleAuthenticationService.html","title":"injectable - GoogleAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/providers/google-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                oauthClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authenticate\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtConfiguration: ConfigType<>, usersService: UsersService, generateTokensProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/social/providers/google-authentication.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauthClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/social/providers/google-authentication.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, NotFoundException, OnModuleInit } from '@nestjs/common';\nimport { type ConfigType } from '@nestjs/config';\nimport { OAuth2Client } from 'google-auth-library';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { GoogleTokenDto } from '../dtos/google-token.dto';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { GenerateTokensProvider } from 'src/auth/providers/generate-tokens.provider';\n\n@Injectable()\nexport class GoogleAuthenticationService implements OnModuleInit {\n\n    private oauthClient: OAuth2Client;\n\n    constructor(\n        /**\n         * Injecting jwt configuration\n         */\n        @Inject(jwtConfig.KEY)\n        private readonly jwtConfiguration: ConfigType,\n\n        /**\n         * Injecting usersService \n         */\n        @Inject(forwardRef(() => UsersService))\n        private readonly usersService: UsersService,\n\n        /**\n         * Injecting generateTokensProvider \n         */\n        private readonly generateTokensProvider: GenerateTokensProvider,\n    ) { }\n\n    onModuleInit() {\n        const clientId = this.jwtConfiguration.googleClientId;\n        const clientSecret = this.jwtConfiguration.googleClientSecret;\n        this.oauthClient = new OAuth2Client(clientId, clientSecret);\n    }\n\n    public async authenticate(googleTokenDto: GoogleTokenDto) {\n\n        try {\n            // Verify the Google token sent by the user\n            const loginTicket = await this.oauthClient.verifyIdToken({ idToken: googleTokenDto.token });\n            // Extract payload from Google JWT\n            const { email, sub: googleId, given_name: userName, picture } = loginTicket.getPayload() ?? {};\n\n            if (!googleId || !email) {\n                throw new NotFoundException('Invalid Google account information');\n            }\n\n            // Find the user in the database using googleId\n            let user = await this.usersService.findOneUserByGoogleId(googleId);\n\n            if (!user) {\n                user = await this.usersService.createGoogleUser({\n                    email: email,\n                    userName: userName ?? '',\n                    googleId: googleId,\n                    picture: picture ?? '',\n                })\n            }\n\n            // Return generated tokens\n            return this.generateTokensProvider.generateTokens(user!);\n\n        } catch (error) {\n\n            throw new NotFoundException('Invalid or expired Google token');\n\n        }\n\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleTokenDto.html":{"url":"classes/GoogleTokenDto.html","title":"class - GoogleTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/dtos/google-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Authenticate a user via Google OAuth'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/social/dtos/google-token.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class GoogleTokenDto {\n    @ApiProperty({ description: 'Authenticate a user via Google OAuth' })\n    @IsString()\n    @IsNotEmpty()\n    token: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleUser.html":{"url":"classes/GoogleUser.html","title":"class - GoogleUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/google-user.interface.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                googleId\n                            \n                            \n                                picture\n                            \n                            \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/interfaces/google-user.interface.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/interfaces/google-user.interface.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/interfaces/google-user.interface.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/interfaces/google-user.interface.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GoogleUser {\n    email: string;\n    userName: string;\n    googleId: string;\n    picture: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePassword\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingProvider {\n\n    abstract hashPassword(data: string | Buffer): Promise;\n\n    abstract comparePassword(data: string | Buffer, encrypted: string): Promise\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LinkYoutubeDto.html":{"url":"classes/LinkYoutubeDto.html","title":"class - LinkYoutubeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LinkYoutubeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/social-accounts/dtos/link-youtube.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                code\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'OAuth code returned from Google'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/social-accounts/dtos/link-youtube.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString } from \"class-validator\";\n\nexport class LinkYoutubeDto {\n    @ApiProperty({ description: 'OAuth code returned from Google' })\n    @IsString()\n    code: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/swagger\"\nimport { CreateUserDto } from \"./create-user.dto\"\n\nexport class PatchUserDto extends PartialType(CreateUserDto) { }\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserPreferencesDTo.html":{"url":"classes/PatchUserPreferencesDTo.html","title":"class - PatchUserPreferencesDTo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserPreferencesDTo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user-preferences.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(UserPreferencesDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/swagger\";\nimport { UserPreferencesDto } from \"./user-preferences.dto\";\n\nexport class PatchUserPreferencesDTo extends PartialType(UserPreferencesDto) { }\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The refresh token issued during authentication'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/refresh-token.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class RefreshTokenDto {\n    @ApiProperty({\n        description: 'The refresh token issued during authentication',\n    })\n    @IsString()\n    @IsNotEmpty()\n    refreshToken: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokensProvider.html":{"url":"injectables/RefreshTokensProvider.html","title":"injectable - RefreshTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/refresh-tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>, generateTokensProvider: GenerateTokensProvider, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/refresh-tokens.provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/refresh-tokens.provider.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { RefreshTokenDto } from '../dtos/refresh-token.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport { type ConfigType } from '@nestjs/config';\nimport jwtConfig from '../config/jwt.config';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class RefreshTokensProvider {\n\n    constructor(\n        /**\n        * Injecting jwtService\n        */\n        private readonly jwtService: JwtService,\n\n        /**\n         * Injecting jwtConfiguration\n         */\n        @Inject(jwtConfig.KEY)\n        private readonly jwtConfiguration: ConfigType,\n\n        /**\n         * Injecting generateTokensProvider\n         */\n        private readonly generateTokensProvider: GenerateTokensProvider,\n\n        /**\n         * Injecting usersService\n         */\n        @Inject(forwardRef(() => UsersService))\n        private readonly usersService: UsersService,\n\n    ) { }\n\n    public async refreshTokens(refreshTokenDto: RefreshTokenDto) {\n\n        try {\n            const { sub } = await this.jwtService.verifyAsync(refreshTokenDto.refreshToken, {\n                secret: this.jwtConfiguration.secret,\n                audience: this.jwtConfiguration.audience,\n                issuer: this.jwtConfiguration.issuer\n            })\n\n            const user = await this.usersService.findOneUser(sub);\n\n            return await this.generateTokensProvider.generateTokens(user)\n        } catch (error) {\n            throw new UnauthorizedException(error)\n        }\n\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectChannelDto.html":{"url":"classes/SelectChannelDto.html","title":"class - SelectChannelDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectChannelDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/social-accounts/dtos/select-channel.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                channelId\n                            \n                            \n                                    \n                                    \n                                    \n                                channelName\n                            \n                            \n                                    \n                                    \n                                niche\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The unique identifier of the selected social media channel (provided by the platform).', example: 'UC_x5XG1OV2P6uZZ5FSM9Ttw'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/social-accounts/dtos/select-channel.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        channelName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The display name of the selected social media channel.', example: 'Tech World'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/social-accounts/dtos/select-channel.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        niche\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Niche\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The niche or category this channel belongs to. Must match one of the predefined niche enum values.', enum: Niche, example: undefined})@IsEnum(Niche, {message: 'Niche must be a valid value from the Niche enum.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/social-accounts/dtos/select-channel.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty, IsString } from \"class-validator\"\nimport { Niche } from \"../enums/niche.enums\"\nimport { ApiProperty } from \"@nestjs/swagger\";\n\nexport class SelectChannelDto {\n    @ApiProperty({\n        description: \"The unique identifier of the selected social media channel (provided by the platform).\",\n        example: \"UC_x5XG1OV2P6uZZ5FSM9Ttw\"\n    })\n    @IsString()\n    @IsNotEmpty()\n    channelId: string;\n\n    @ApiProperty({\n        description: \"The display name of the selected social media channel.\",\n        example: \"Tech World\"\n    })\n    @IsString()\n    @IsNotEmpty()\n    channelName: string;\n\n    @ApiProperty({\n        description: \"The niche or category this channel belongs to. Must match one of the predefined niche enum values.\",\n        enum: Niche,\n        example: Niche.NEWS\n    })\n    @IsEnum(Niche, { message: 'Niche must be a valid value from the Niche enum.' })\n    niche: Niche;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/signin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The email address associated with the user's account. Must be a valid email format.', example: 'johndoe@example.com', format: 'email'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The password for the user's account. Must match the password set during registration.', example: 'StrongP@ssw0rd!', minLength: 8})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail, IsNotEmpty, IsString } from \"class-validator\";\n\nexport class SignInDto {\n    @ApiProperty({\n        description: \"The email address associated with the user's account. Must be a valid email format.\",\n        example: \"johndoe@example.com\",\n        format: \"email\",\n    })\n    @IsEmail()\n    @IsNotEmpty()\n    email: string;\n\n    @ApiProperty({\n        description: \"The password for the user's account. Must match the password set during registration.\",\n        example: \"StrongP@ssw0rd!\",\n        minLength: 8,\n    })\n    @IsNotEmpty()\n    @IsString()\n    password: string;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SignInProvider.html":{"url":"injectables/SignInProvider.html","title":"injectable - SignInProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SignInProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/sign-in.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, hashinProvider: HashingProvider, jwtService: JwtService, jwtConfiguration: ConfigType<>, configService: ConfigService, generateTokensProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/sign-in.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashinProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/sign-in.provider.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, InternalServerErrorException, UnauthorizedException } from '@nestjs/common';\nimport { SignInDto } from '../dtos/signin.dto';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { HashingProvider } from './hashing.provider';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService, type ConfigType } from '@nestjs/config';\nimport jwtConfig from '../config/jwt.config';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\n\n@Injectable()\nexport class SignInProvider {\n\n    constructor(\n\n        /**\n         * Injecting usersService\n         */\n        @Inject(forwardRef(() => UsersService))\n        private readonly usersService: UsersService,\n\n        /**\n         * Injecting hashingProvider\n         */\n        private readonly hashinProvider: HashingProvider,\n\n        /**\n         * Injecting jwtService\n         */\n        private readonly jwtService: JwtService,\n\n        /**\n         * Injecting jwtConfiguration\n         */\n        @Inject(jwtConfig.KEY)\n        private readonly jwtConfiguration: ConfigType,\n\n        /**\n         * Injecting cofigService \n         */\n        private readonly configService: ConfigService,\n\n        /**\n         * Injecting generateTokensProvider\n         */\n        private readonly generateTokensProvider: GenerateTokensProvider\n    ) { }\n\n    public async signIn(signInDto: SignInDto) {\n        // find the user using email\n        const user = await this.usersService.findOneUserByEmail(signInDto.email)\n\n        if (!user) {\n            throw new UnauthorizedException('Invalid credentials');\n        }\n        // Check if user has a password (for social login users who might not have passwords)\n        if (!user.password) {\n            throw new UnauthorizedException('Invalid credentials');\n        }\n        // compare password\n        let isVerified: boolean = false\n\n        try {\n            isVerified = await this.hashinProvider.comparePassword(signInDto.password, user.password)\n\n        } catch (error) {\n\n            throw new InternalServerErrorException('Password comparison failed');\n        }\n\n        if (!isVerified) {\n            throw new UnauthorizedException('Invalid credentials')\n        }\n\n        return await this.generateTokensProvider.generateTokens(user)\n\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/SocialAccounts.html":{"url":"entities/SocialAccounts.html","title":"entity - SocialAccounts","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  SocialAccounts\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/social-accounts/social-accounts.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                channelId\n                            \n                            \n                                    \n                                channelName\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                niche\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/social-accounts/social-accounts.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        channelName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/social-accounts/social-accounts.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/social-accounts/social-accounts.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/social-accounts/social-accounts.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        niche\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Niche\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/social-accounts/social-accounts.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/social-accounts/social-accounts.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.channels, {onDelete: 'CASCADE', eager: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/social-accounts/social-accounts.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, ManyToOne, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\nimport { Niche } from \"./enums/niche.enums\";\nimport { User } from \"src/users/user.entity\";\n\n@Entity()\nexport class SocialAccounts {\n    @PrimaryGeneratedColumn('uuid')\n    id: string;\n\n    @Column({ unique: true })\n    channelId: string;\n\n    @Column()\n    channelName: string;\n\n    @Column()\n    niche: Niche;\n\n    @ManyToOne(() => User, (user) => user.channels, {\n        onDelete: 'CASCADE',\n        eager: false\n    })\n    user: User\n\n    @CreateDateColumn()\n    createdAt: Date;\n\n    @UpdateDateColumn()\n    updatedAt: Date;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SocialAccountsController.html":{"url":"controllers/SocialAccountsController.html","title":"controller - SocialAccountsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SocialAccountsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/social-accounts/social-accounts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                social-accounts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getMyAccounts\n                            \n                            \n                                    \n                                    Async\n                                linkYoutube\n                            \n                            \n                                    \n                                removeAccount\n                            \n                            \n                                    \n                                    Async\n                                saveYoutubeChannel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getMyAccounts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMyAccounts(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('my')\n                \n            \n\n                    \n                        \n                            Defined in src/social-accounts/social-accounts.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        linkYoutube\n                        \n                    \n                \n            \n            \n                \n                        \n                    linkYoutube(linkYoutubeDto: LinkYoutubeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('youtube/link')\n                \n            \n\n                    \n                        \n                            Defined in src/social-accounts/social-accounts.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                linkYoutubeDto\n                                            \n                                                            LinkYoutubeDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeAccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeAccount(id: string, req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/social-accounts/social-accounts.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        saveYoutubeChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveYoutubeChannel(req: Request, selectChannelDto: SelectChannelDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('youtube/save')\n                \n            \n\n                    \n                        \n                            Defined in src/social-accounts/social-accounts.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                selectChannelDto\n                                            \n                                                            SelectChannelDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Req, Delete, Param, Request } from '@nestjs/common';\nimport { LinkYoutubeDto } from './dtos/link-youtube.dto';\nimport { SelectChannelDto } from './dtos/select-channel.dto';\nimport { SocialAccountsService } from './providers/social-accounts.service';\n\n@Controller('social-accounts')\nexport class SocialAccountsController {\n    constructor(\n        /**\n         * injecting SocialAccountsService\n         */\n        private readonly socialAccountsService: SocialAccountsService\n\n    ) { }\n\n    @Get('my')\n    getMyAccounts(@Req() req: Request) {\n        //TODO: get authenticated user id form req.user.id\n\n        return this.socialAccountsService.getAccounts('b229f0df-4a5f-4999-b996-e30141424235');\n    }\n\n    @Post('youtube/link')\n    async linkYoutube(@Body() linkYoutubeDto: LinkYoutubeDto) {\n        return this.socialAccountsService.linkYoutube(linkYoutubeDto);\n    }\n\n    @Post('youtube/save')\n    async saveYoutubeChannel(@Req() req: Request, @Body() selectChannelDto: SelectChannelDto,) {\n\n        //TODO: get authenticated user id form req.user.id\n        return this.socialAccountsService.saveYoutubeChannel('2a3220a6-307b-42e4-911f-0b9ceb163a49', selectChannelDto);\n    }\n\n    @Delete(':id')\n    removeAccount(@Param('id') id: string, @Req() req: Request) {\n        //TODO: get authenticated user id form req.user.id\n\n        return this.socialAccountsService.removeAccount(id, '98ef9bd1-bc22-4c48-bb40-2bd9da1f4903');\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SocialAccountsModule.html":{"url":"modules/SocialAccountsModule.html","title":"module - SocialAccountsModule","body":"\n                   \n\n\n\n\n    Modules\n    SocialAccountsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SocialAccountsModule\n\n\n\ncluster_SocialAccountsModule_imports\n\n\n\ncluster_SocialAccountsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nSocialAccountsModule\n\nSocialAccountsModule\n\nSocialAccountsModule -->\n\nUsersModule->SocialAccountsModule\n\n\n\n\n\nSocialAccountsService\n\nSocialAccountsService\n\nSocialAccountsModule -->\n\nSocialAccountsService->SocialAccountsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/social-accounts/social-accounts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SocialAccountsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SocialAccountsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SocialAccountsController } from './social-accounts.controller';\nimport { SocialAccountsService } from './providers/social-accounts.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { SocialAccounts } from './social-accounts.entity';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([SocialAccounts]), UsersModule],\n  controllers: [SocialAccountsController],\n  providers: [SocialAccountsService]\n})\nexport class SocialAccountsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SocialAccountsService.html":{"url":"injectables/SocialAccountsService.html","title":"injectable - SocialAccountsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SocialAccountsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/social-accounts/providers/social-accounts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAccounts\n                            \n                            \n                                    Async\n                                linkYoutube\n                            \n                            \n                                    Async\n                                removeAccount\n                            \n                            \n                                    Async\n                                saveYoutubeChannel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, socialAccountsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/social-accounts/providers/social-accounts.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        socialAccountsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAccounts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAccounts(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/social-accounts/providers/social-accounts.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        linkYoutube\n                        \n                    \n                \n            \n            \n                \n                        \n                    linkYoutube(linkYoutubeDto: LinkYoutubeDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/social-accounts/providers/social-accounts.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                linkYoutubeDto\n                                            \n                                                            LinkYoutubeDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeAccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeAccount(channelId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/social-accounts/providers/social-accounts.service.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveYoutubeChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveYoutubeChannel(userId: string, selectChannelDto: SelectChannelDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/social-accounts/providers/social-accounts.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                selectChannelDto\n                                            \n                                                            SelectChannelDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, InternalServerErrorException, NotFoundException } from '@nestjs/common';\nimport { LinkYoutubeDto } from '../dtos/link-youtube.dto';\nimport { SelectChannelDto } from '../dtos/select-channel.dto';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { GetOneUserParamDto } from 'src/users/dtos/get-one-user.dto';\nimport { Repository } from 'typeorm';\nimport { SocialAccounts } from '../social-accounts.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class SocialAccountsService {\n\n    constructor(\n        /**\n         * Injecting usersService\n         */\n        private readonly usersService: UsersService,\n\n        /**\n       * Injecting socialAcconts Repository\n       */\n        @InjectRepository(SocialAccounts)\n        private readonly socialAccountsRepository: Repository\n    ) { }\n\n    async getAccounts(userId: string) {\n\n        try {\n            const channels = await this.socialAccountsRepository.find({\n                where: { user: { id: userId } },\n            })\n\n            if (!channels) {\n                throw new NotFoundException(`No linked channels found for user ID: ${userId}`)\n            }\n            return channels\n\n        } catch (error) {\n\n            if (error instanceof NotFoundException) {\n                throw error\n            }\n\n            // Todo:Use NestJS logger \n            console.error('Error finding user:', error);\n\n            throw new InternalServerErrorException('Failed to find user.');\n        }\n\n    }\n\n    async linkYoutube(linkYoutubeDto: LinkYoutubeDto) {\n        return {\n            message: 'service to link a youtube account',\n            linkYoutubeDto\n        };\n    }\n\n    async saveYoutubeChannel(userId: string, selectChannelDto: SelectChannelDto) {\n        try {\n            const id = { id: userId } as GetOneUserParamDto;\n            const user = await this.usersService.findOneUser(id);\n\n            if (!user) {\n                throw new NotFoundException(`User not found with ID: ${userId}`);\n            }\n\n            const newChannel = this.socialAccountsRepository.create({\n                ...selectChannelDto,\n                user,\n            });\n\n            const savedChannel = await this.socialAccountsRepository.save(newChannel);\n\n            return savedChannel;\n        } catch (error) {\n\n            if (error instanceof NotFoundException) {\n                throw error;\n            }\n\n            // Todo:Use NestJS logger \n            console.error(\n                `Failed to save YouTube channel for user ${userId}:`,\n                error\n            );\n\n            throw new InternalServerErrorException(\n                'Unable to save YouTube channel at this time. Please try again later.'\n            );\n        }\n    }\n\n    async removeAccount(channelId: string, userId: string) {\n\n        try {\n            const account = await this.socialAccountsRepository.findOne({\n                where: { id: channelId, user: { id: userId } },\n            });\n\n            if (!account) {\n                throw new NotFoundException(\n                    `Channel with ID ${channelId} not found or you are not authorized to delete it.`\n                );\n            }\n\n            await this.socialAccountsRepository.remove(account);\n\n            return { message: 'Channel removed successfully.' };\n        } catch (error) {\n            if (error instanceof NotFoundException) {\n                throw error;\n            }\n\n            // Todo:Use NestJS logger\n            console.error(\n                `Failed to remove channel ${channelId} for user ${userId}:`,\n                error\n            );\n\n            throw new InternalServerErrorException(\n                'Unable to remove channel at this time. Please try again later.'\n            );\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                channels\n                            \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                facebookId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                picture\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                preferences\n                            \n                            \n                                    \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        channels\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SocialAccounts[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, channel => channel.user, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'john.doe@gmail.com'})@Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        facebookId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@ApiProperty()@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@ApiProperty()@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'a3bb189e-8bf9-3888-9912-2344c0d4b308'})@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@ApiProperty({example: '$2b$10$xyz...'})@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        picture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        preferences\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User preferences stored as JSON', type: () => UserPreferencesDto, required: false})@Column({type: 'jsonb', nullable: true, default: () => })\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'JohnDoe'})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, OneToMany, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\nimport { UserPreferencesDto } from \"./dtos/user-preferences.dto\";\nimport { ApiProperty } from \"@nestjs/swagger\";\nimport { Exclude } from \"class-transformer\";\nimport { SocialAccounts } from \"src/social-accounts/social-accounts.entity\";\n\n@Entity()\nexport class User {\n    @ApiProperty({ example: 'a3bb189e-8bf9-3888-9912-2344c0d4b308' })\n    @PrimaryGeneratedColumn('uuid')\n    id: string;\n\n    @ApiProperty({ example: 'john.doe@gmail.com' })\n    @Column({ unique: true })\n    email: string;\n\n    @ApiProperty({ example: 'JohnDoe' })\n    @Column()\n    userName: string;\n\n    @Exclude()\n    @ApiProperty({ example: '$2b$10$xyz...' })\n    @Column({ nullable: true })\n    password?: string;\n\n    @Exclude()\n    @ApiProperty()\n    @Column({ nullable: true })\n    googleId?: string;\n\n    @Exclude()\n    @ApiProperty()\n    @Column({ nullable: true })\n    facebookId?: string;\n\n    @ApiProperty({\n        description: 'User preferences stored as JSON',\n        type: () => UserPreferencesDto,\n        required: false,\n    })\n    @Column({\n        type: 'jsonb',\n        nullable: true,\n        default: () => `'{ \"frequencyOfUpload\": 1, \"autoPost\": true, \"replyTone\": \"PROFESSIONAL\" }'`,\n    })\n    preferences?: Partial\n\n    @OneToMany(() => SocialAccounts, (channel) => channel.user, {\n        cascade: true,\n    })\n    channels: SocialAccounts[];\n\n    @ApiProperty()\n    @Column({ nullable: true })\n    picture?: string\n\n    @Exclude()\n    @CreateDateColumn()\n    createdAt: Date;\n\n    @Exclude()\n    @UpdateDateColumn()\n    updatedAt: Date;\n} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserPreferencesDto.html":{"url":"classes/UserPreferencesDto.html","title":"class - UserPreferencesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserPreferencesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/user-preferences.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                autoPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                frequencyOfUpload\n                            \n                            \n                                    \n                                    \n                                replyTone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        autoPost\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: true, description: 'Whether to auto-post content'})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user-preferences.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        frequencyOfUpload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 3, description: 'Number of uploads per day'})@IsNumber()@Min(0)@Max(3)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user-preferences.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        replyTone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReplyTone\n\n                    \n                \n                \n                    \n                        Default value : ReplyTone.PROFESSIONAL\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: ReplyTone, example: undefined, description: 'Tone for replies in generated responses'})@IsEnum(ReplyTone, {message: 'replyTone must be one of: PROFESSIONAL, WITTY, HUMOROUS'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user-preferences.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, Min, Max, IsBoolean, IsEnum } from \"class-validator\";\nimport { ReplyTone } from \"../enums/replyTone.enums\";\nimport { ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class UserPreferencesDto {\n    @ApiPropertyOptional({ example: 3, description: 'Number of uploads per day' })\n    @IsNumber()\n    @Min(0)\n    @Max(3)\n    frequencyOfUpload: number = 1;\n\n    @ApiPropertyOptional({ example: true, description: 'Whether to auto-post content' })\n    @IsBoolean()\n    autoPost: boolean = true;\n\n    @ApiPropertyOptional({\n        enum: ReplyTone,\n        example: ReplyTone.PROFESSIONAL,\n        description: 'Tone for replies in generated responses',\n    })\n    @IsEnum(ReplyTone, { message: 'replyTone must be one of: PROFESSIONAL, WITTY, HUMOROUS' })\n    replyTone: ReplyTone = ReplyTone.PROFESSIONAL;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    Public\n                                deleteUser\n                            \n                            \n                                    \n                                    Public\n                                findAllUsers\n                            \n                            \n                                    \n                                    Public\n                                findOneUser\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                            \n                                    \n                                    Public\n                                patchUserPreferences\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Auth(AuthType.None)@UseInterceptors(ClassSerializerInterceptor)@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(getOneUserParamDto: GetOneUserParamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getOneUserParamDto\n                                            \n                                                            GetOneUserParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        findAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllUsers(getAllUsersParamDto: GetAllUsersParamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getAllUsersParamDto\n                                            \n                                                            GetAllUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        findOneUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneUser(getOneUserParamDto: GetOneUserParamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getOneUserParamDto\n                                            \n                                                            GetOneUserParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(user: CurrentUser, patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('me')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            CurrentUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUserPreferences\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUserPreferences(user: CurrentUser, patchUserPreferencesDto: PatchUserPreferencesDTo)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('preferences')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            CurrentUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                patchUserPreferencesDto\n                                            \n                                                            PatchUserPreferencesDTo\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, ClassSerializerInterceptor, Controller, Delete, Get, Param, Patch, Post, Query, UseInterceptors } from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetAllUsersParamDto } from './dtos/get-users.dto';\nimport { GetOneUserParamDto } from './dtos/get-one-user.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { PatchUserPreferencesDTo } from './dtos/patch-user-preferences.dto';\nimport { CurrentUserData } from 'src/auth/decorators/current-user-data.decorator';\nimport { type CurrentUser } from 'src/auth/interfaces/current-user.interface';\nimport { Auth } from 'src/auth/decorators/auth.decorator';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\n\n@Controller('users')\nexport class UsersController {\n    constructor(\n        /**\n         * injecting usersService as a dependency\n         */\n        private readonly usersService: UsersService\n\n    ) { }\n\n    @Get()\n    public findAllUsers(@Query() getAllUsersParamDto: GetAllUsersParamDto) {\n        return this.usersService.findAllUsers(getAllUsersParamDto)\n    }\n\n    @Get(':id')\n    public findOneUser(@Param() getOneUserParamDto: GetOneUserParamDto) {\n        return this.usersService.findOneUser(getOneUserParamDto)\n    }\n\n    @Auth(AuthType.None)\n    @UseInterceptors(ClassSerializerInterceptor)\n    @Post()\n    public createUser(@Body() createUserDto: CreateUserDto) {\n        return this.usersService.ceateUser(createUserDto)\n    }\n\n    @Patch('preferences')\n    public patchUserPreferences(\n        @CurrentUserData() user: CurrentUser,\n        @Body() patchUserPreferencesDto: PatchUserPreferencesDTo\n    ) {\n        return this.usersService.patchUserPreferences(user.sub, patchUserPreferencesDto)\n    }\n\n    @Patch('me')\n    public patchUser(\n        @CurrentUserData() user: CurrentUser,\n        @Body() patchUserDto: PatchUserDto\n    ) {\n        return this.usersService.patchUser(user.sub, patchUserDto)\n    }\n\n    @Delete(':id')\n    public deleteUser(@Param() getOneUserParamDto: GetOneUserParamDto) {\n        return this.usersService.deleteUser(getOneUserParamDto)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nCreateFacebookUserProvider\n\nCreateFacebookUserProvider\n\nUsersModule -->\n\nCreateFacebookUserProvider->UsersModule\n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUsersModule -->\n\nCreateGoogleUserProvider->UsersModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUsersModule -->\n\nFindOneUserByEmailProvider->UsersModule\n\n\n\n\n\nFindOneUserByFacebookIdProvider\n\nFindOneUserByFacebookIdProvider\n\nUsersModule -->\n\nFindOneUserByFacebookIdProvider->UsersModule\n\n\n\n\n\nFindOneUserByGoogleIdProvider\n\nFindOneUserByGoogleIdProvider\n\nUsersModule -->\n\nFindOneUserByGoogleIdProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateFacebookUserProvider\n                        \n                        \n                            CreateGoogleUserProvider\n                        \n                        \n                            CreateUserProvider\n                        \n                        \n                            FindOneUserByEmailProvider\n                        \n                        \n                            FindOneUserByFacebookIdProvider\n                        \n                        \n                            FindOneUserByGoogleIdProvider\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { CreateUserProvider } from './providers/create-user.provider';\nimport { FindOneUserByEmailProvider } from './providers/find-one-user-by-email.provider';\nimport { FindOneUserByGoogleIdProvider } from './providers/find-one-user-by-google-id.provider';\nimport { CreateGoogleUserProvider } from './providers/create-google-user.provider';\nimport { FindOneUserByFacebookIdProvider } from './providers/find-one-user-by-facebook-id.provider';\nimport { CreateFacebookUserProvider } from './providers/create-facebook-user.provider';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService, CreateUserProvider, FindOneUserByEmailProvider, FindOneUserByGoogleIdProvider, CreateGoogleUserProvider, FindOneUserByFacebookIdProvider, CreateFacebookUserProvider],\n  exports: [UsersService],\n  imports: [forwardRef(() => AuthModule),\n  TypeOrmModule.forFeature([User]),\n  ],\n\n})\nexport class UsersModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service class for '/users' controller\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                ceateUser\n                            \n                            \n                                    Public\n                                    Async\n                                createFacebookUser\n                            \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                            \n                                    Public\n                                    Async\n                                deleteUser\n                            \n                            \n                                    Public\n                                    Async\n                                findAllUsers\n                            \n                            \n                                    Public\n                                    Async\n                                findOneUser\n                            \n                            \n                                    Public\n                                    Async\n                                findOneUserByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                findOneUserByFacebookId\n                            \n                            \n                                    Public\n                                    Async\n                                findOneUserByGoogleId\n                            \n                            \n                                    Public\n                                    Async\n                                patchUser\n                            \n                            \n                                    Public\n                                    Async\n                                patchUserPreferences\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersRepository: Repository, createUserProvider: CreateUserProvider, findOneUserByEmailProvider: FindOneUserByEmailProvider, findOneUserByGoogleIdProvider: FindOneUserByGoogleIdProvider, findOneUserByFacebookIdProvider: FindOneUserByFacebookIdProvider, createGoogleUserProvider: CreateGoogleUserProvider, createFacebookUserProvider: CreateFacebookUserProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createUserProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneUserByEmailProvider\n                                                  \n                                                        \n                                                                        FindOneUserByEmailProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneUserByGoogleIdProvider\n                                                  \n                                                        \n                                                                        FindOneUserByGoogleIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneUserByFacebookIdProvider\n                                                  \n                                                        \n                                                                        FindOneUserByFacebookIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createGoogleUserProvider\n                                                  \n                                                        \n                                                                        CreateGoogleUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createFacebookUserProvider\n                                                  \n                                                        \n                                                                        CreateFacebookUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        ceateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    ceateUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createFacebookUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createFacebookUser(facebookUser: FacebookUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:257\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                facebookUser\n                                            \n                                                            FacebookUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:251\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(getOneUserParamDto: GetOneUserParamDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:205\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getOneUserParamDto\n                                            \n                                                            GetOneUserParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllUsers(getAllUsersParamDto: GetAllUsersParamDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getAllUsersParamDto\n                                            \n                                                            GetAllUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneUser(getOneUserParamDto: GetOneUserParamDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getOneUserParamDto\n                                            \n                                                            GetOneUserParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:234\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneUserByFacebookId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneUserByFacebookId(facebookId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:246\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                facebookId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneUserByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneUserByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:240\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(id: string, patchUserDto: PatchUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:136\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        patchUserPreferences\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUserPreferences(id: string, patchUserPreferencesDto: PatchUserPreferencesDTo)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:168\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                patchUserPreferencesDto\n                                            \n                                                            PatchUserPreferencesDTo\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, forwardRef, Inject, Injectable, InternalServerErrorException, NotFoundException } from '@nestjs/common';\nimport { GetAllUsersParamDto } from '../dtos/get-users.dto';\nimport { GetOneUserParamDto } from '../dtos/get-one-user.dto';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { PatchUserDto } from '../dtos/patch-user.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\nimport { PatchUserPreferencesDTo } from '../dtos/patch-user-preferences.dto';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserProvider } from './create-user.provider';\nimport { FindOneUserByEmailProvider } from './find-one-user-by-email.provider';\nimport { FindOneUserByGoogleIdProvider } from './find-one-user-by-google-id.provider';\nimport { CreateGoogleUserProvider } from './create-google-user.provider';\nimport { GoogleUser } from '../interfaces/google-user.interface';\nimport { FindOneUserByFacebookIdProvider } from './find-one-user-by-facebook-id.provider';\nimport { CreateFacebookUserProvider } from './create-facebook-user.provider';\nimport { FacebookUser } from '../interfaces/facebook-user.interface';\n\n/**\n * Service class for '/users' controller\n */\n@Injectable()\nexport class UsersService {\n    constructor(\n        /**\n         * Injecting Auth Service \n         */\n        @Inject(forwardRef(() => AuthService))\n        private readonly authService: AuthService,\n\n        /**\n         * Injecting usersRepository\n         */\n        @InjectRepository(User)\n        private readonly usersRepository: Repository,\n\n        /**\n         * Injecting createUserProvider\n         */\n        private readonly createUserProvider: CreateUserProvider,\n\n        /**\n         * Injecting findOneUserByEmail\n         */\n        private readonly findOneUserByEmailProvider: FindOneUserByEmailProvider,\n\n        /**\n         * Injecting findOneUserByGoogleIdProvider\n         */\n        private readonly findOneUserByGoogleIdProvider: FindOneUserByGoogleIdProvider,\n        /**\n         * Injecting createGoogleUserProvider\n         */\n\n        /**\n         * Injecting findOneUserByFacebookIdProvider\n         */\n        private readonly findOneUserByFacebookIdProvider: FindOneUserByFacebookIdProvider,\n\n        /**\n        * Injecting createGoogleUserProvider\n        */\n        private readonly createGoogleUserProvider: CreateGoogleUserProvider,\n\n        /**\n         * Injecting createFacebookUserProvider\n         */\n        private readonly createFacebookUserProvider: CreateFacebookUserProvider\n    ) { }\n\n    public async findAllUsers(getAllUsersParamDto: GetAllUsersParamDto) {\n\n        try {\n            const { page = 1, limit = 10 } = getAllUsersParamDto\n\n            const [users, total] = await this.usersRepository.findAndCount({\n                skip: (page - 1) * limit,\n                take: limit,\n                order: { createdAt: 'DESC' }\n            });\n\n            if (users.length === 0) {\n                return {};\n            }\n\n            return {\n                total,\n                page,\n                limit,\n                data: users,\n            };\n\n        } catch (error) {\n\n            // Todo:Use NestJS logger \n            console.error('Failed to fetch users:', error);\n\n            throw new InternalServerErrorException('Failed to fetch users.');\n        }\n\n    }\n\n    public async findOneUser(getOneUserParamDto: GetOneUserParamDto): Promise {\n        const { id } = getOneUserParamDto\n\n        try {\n            const user = await this.usersRepository.findOne({\n                where: { id },\n                relations: ['channels'],\n            });\n\n            if (!user) {\n                throw new NotFoundException('user not found')\n            }\n\n            return user\n        } catch (error) {\n            if (error instanceof NotFoundException) {\n                throw error\n            }\n\n            // Todo:Use NestJS logger \n            console.error('Error finding user:', error);\n\n            throw new InternalServerErrorException('Failed to find user.');\n\n        }\n    }\n\n    public async ceateUser(createUserDto: CreateUserDto): Promise {\n\n        return this.createUserProvider.ceateUser(createUserDto)\n    }\n\n    public async patchUser(id: string, patchUserDto: PatchUserDto)\n        : Promise {\n\n        try {\n            const user = await this.usersRepository.findOne({ where: { id } })\n\n            if (!user) {\n                throw new NotFoundException(`user with ${id} not found`)\n            }\n\n            Object.assign(user, patchUserDto)\n            const updatedUser = await this.usersRepository.save(user);\n\n            return {\n                message: `user updated successfully`,\n                user: updatedUser,\n            };\n\n        } catch (error) {\n\n            if (error instanceof NotFoundException) {\n                throw error;\n            }\n\n            // Todo:Use NestJS logger \n            console.error('Failed to update user:', error);\n\n            throw new InternalServerErrorException('Failed to update user.');\n\n        }\n    }\n\n    public async patchUserPreferences(\n        id: string,\n        patchUserPreferencesDto: PatchUserPreferencesDTo\n    ): Promise {\n\n        try {\n            const user = await this.usersRepository.findOne({ where: { id } });\n\n            if (!user) {\n                throw new NotFoundException(`User with ID ${id} was not found.`);\n            }\n\n            user.preferences = {\n                ...user.preferences,\n                ...patchUserPreferencesDto,\n            };\n\n            const updatedUser = await this.usersRepository.save(user);\n\n            return {\n                message: 'User preferences updated successfully.',\n                preferences: updatedUser.preferences as PatchUserPreferencesDTo\n            };\n        } catch (error) {\n            if (error instanceof NotFoundException) {\n                throw error;\n            }\n\n            // Todo:Use NestJS logger \n            console.error('Failed to update user preferences:', error);\n\n            throw new InternalServerErrorException(\n                'Failed to update user preferences.',\n            );\n        }\n    }\n\n    public async deleteUser(getOneUserParamDto: GetOneUserParamDto): Promise {\n\n        const { id } = getOneUserParamDto;\n\n        try {\n            const user = await this.usersRepository.findOne({ where: { id } });\n\n            if (!user) {\n                throw new NotFoundException(`User with ID ${id} was not found.`);\n            }\n\n            await this.usersRepository.remove(user);\n\n            return {\n                message: `user deleted successfully.`,\n                user\n            };\n        } catch (error) {\n            if (error instanceof NotFoundException) {\n                throw error;\n            }\n\n            // Todo:Use NestJS logger\n            console.error('Failed to delete user:', error);\n\n            throw new InternalServerErrorException('Failed to delete user. Please try again later.');\n        }\n    }\n\n    public async findOneUserByEmail(email: string): Promise {\n\n        return this.findOneUserByEmailProvider.findOneByEmail(email)\n\n    }\n\n    public async findOneUserByGoogleId(googleId: string): Promise {\n\n        return this.findOneUserByGoogleIdProvider.findOneUserByGoogleId(googleId)\n\n    }\n\n    public async findOneUserByFacebookId(facebookId: string) {\n\n        return this.findOneUserByFacebookIdProvider.findOneByFacebookId(facebookId)\n    }\n\n    public async createGoogleUser(googleUser: GoogleUser): Promise {\n\n        return this.createGoogleUserProvider.createGoogleUser(googleUser)\n\n    }\n\n    public async createFacebookUser(facebookUser: FacebookUser) {\n\n        return this.createFacebookUserProvider.createFacebookUser(facebookUser)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/constants/auth.constants.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/constants/auth.constants.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/current-user-data.decorator.ts\n            \n            variable\n            CurrentUserData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/signin.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guards/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/interfaces/current-user.interface.ts\n            \n            interface\n            CurrentUser\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/argon2.provider.ts\n            \n            injectable\n            Argon2Provider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-tokens.provider.ts\n            \n            injectable\n            GenerateTokensProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/refresh-tokens.provider.ts\n            \n            injectable\n            RefreshTokensProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/sign-in.provider.ts\n            \n            injectable\n            SignInProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/social/dtos/facebook-token.dto.ts\n            \n            class\n            FacebookTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/dtos/google-token.dto.ts\n            \n            class\n            GoogleTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/facebook-authentication.controller.ts\n            \n            controller\n            FacebookAuthenticationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/google-authentication.controller.ts\n            \n            controller\n            GoogleAuthenticationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/providers/facebook-authentication.service.ts\n            \n            injectable\n            FacebookAuthenticationService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/social/providers/google-authentication.service.ts\n            \n            injectable\n            GoogleAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/interceptors/data-response.interceptor.ts\n            \n            injectable\n            DataResponseInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/social-accounts/dtos/link-youtube.dto.ts\n            \n            class\n            LinkYoutubeDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/social-accounts/dtos/select-channel.dto.ts\n            \n            class\n            SelectChannelDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/social-accounts/providers/social-accounts.service.ts\n            \n            injectable\n            SocialAccountsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/social-accounts/social-accounts.controller.ts\n            \n            controller\n            SocialAccountsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/social-accounts/social-accounts.entity.ts\n            \n            entity\n            SocialAccounts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-one-user.dto.ts\n            \n            class\n            GetOneUserParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users.dto.ts\n            \n            class\n            GetAllUsersParamDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user-preferences.dto.ts\n            \n            class\n            PatchUserPreferencesDTo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/user-preferences.dto.ts\n            \n            class\n            UserPreferencesDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/interfaces/facebook-user.interface.ts\n            \n            class\n            FacebookUser\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/interfaces/google-user.interface.ts\n            \n            class\n            GoogleUser\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/providers/create-facebook-user.provider.ts\n            \n            injectable\n            CreateFacebookUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/create-google-user.provider.ts\n            \n            injectable\n            CreateGoogleUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-user-by-email.provider.ts\n            \n            injectable\n            FindOneUserByEmailProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-user-by-facebook-id.provider.ts\n            \n            injectable\n            FindOneUserByFacebookIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-user-by-google-id.provider.ts\n            \n            injectable\n            FindOneUserByGoogleIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                7 %\n                (1/13)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            argon2 : ^0.44.0\n        \n            axios : ^1.12.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            google-auth-library : ^10.4.0\n        \n            joi : ^18.0.1\n        \n            pg : ^8.16.3\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.27\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth-type.enum.ts)\n                        \n                        \n                            Niche   (src/.../niche.enums.ts)\n                        \n                        \n                            Platform   (src/.../plateform.enums.ts)\n                        \n                        \n                            ReplyTone   (src/.../replyTone.enums.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/enums/auth-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n            \n        \n\n    src/social-accounts/enums/niche.enums.ts\n    \n        \n            \n                \n                    \n                        \n                        Niche\n                    \n                \n                        \n                            \n                                 NEWS\n                            \n                        \n                        \n                            \n                                Value : news\n                            \n                        \n                        \n                            \n                                 MUSIC\n                            \n                        \n                        \n                            \n                                Value : music\n                            \n                        \n                        \n                            \n                                 SPORTS\n                            \n                        \n                        \n                            \n                                Value : sports\n                            \n                        \n                        \n                            \n                                 LIFESTYLE\n                            \n                        \n                        \n                            \n                                Value : lifestyle\n                            \n                        \n                        \n                            \n                                 GAMING\n                            \n                        \n                        \n                            \n                                Value : gaming\n                            \n                        \n                        \n                            \n                                 EDUCATION\n                            \n                        \n                        \n                            \n                                Value : education\n                            \n                        \n            \n        \n\n    src/social-accounts/enums/plateform.enums.ts\n    \n        \n            \n                \n                    \n                        \n                        Platform\n                    \n                \n                        \n                            \n                                 YOUTUBE\n                            \n                        \n                        \n                            \n                                Value : youtube\n                            \n                        \n                        \n                            \n                                 FACEBOOK\n                            \n                        \n                        \n                            \n                                Value : facebook\n                            \n                        \n                        \n                            \n                                 TIKTOK\n                            \n                        \n                        \n                            \n                                Value : tiktok\n                            \n                        \n            \n        \n\n    src/users/enums/replyTone.enums.ts\n    \n        \n            \n                \n                    \n                        \n                        ReplyTone\n                    \n                \n                        \n                            \n                                 PROFESSIONAL\n                            \n                        \n                        \n                            \n                                Value : PROFESSIONAL\n                            \n                        \n                        \n                            \n                                 WITTY\n                            \n                        \n                        \n                            \n                                Value : WITTY\n                            \n                        \n                        \n                            \n                                 HUMOROUS\n                            \n                        \n                        \n                            \n                                Value : HUMOROUS\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nIn today’s digital world, video is the most powerful way to grow an audience but sourcing and creating consistent, high-quality content takes time, skills, and resources that not everyone has. Many content creators, small businesses, and even established brands struggle to keep up with the demand for engaging video.\nReellora was built to solve that problem.\nReellora is a cross-platform tool that automatically sources, curates, and generates high-quality video content, then publishes it across major social media channels. Starting with YouTube and expanding to platforms like Facebook, Instagram, and beyond, Reellora makes it effortless to deliver original, relevant, and engaging videos tailored to your niche.\nWhether you’re a solo creator, entrepreneur, or business owner, Reellora helps you:\nDiscover and source high-quality video material.\nCurate and generate content that fits your brand.\nMaintain a consistent presence across multiple platforms.\nReach wider audiences with engaging, ready-to-publish videos.\nWith Reellora, video content becomes effortless, so you can focus on growing your brand, connecting with your audience, and turning attention into impact.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SocialAccountsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_SocialAccountsModule\n\n\n\ncluster_SocialAccountsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nSocialAccountsModule\n\nSocialAccountsModule\n\nAppModule -->\n\nSocialAccountsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nSocialAccountsModule -->\n\nUsersModule->SocialAccountsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nFacebookAuthenticationService\n\nFacebookAuthenticationService\n\nAuthModule -->\n\nFacebookAuthenticationService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\nSocialAccountsService\n\nSocialAccountsService\n\nSocialAccountsModule -->\n\nSocialAccountsService->SocialAccountsModule\n\n\n\n\n\nCreateFacebookUserProvider\n\nCreateFacebookUserProvider\n\nUsersModule -->\n\nCreateFacebookUserProvider->UsersModule\n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUsersModule -->\n\nCreateGoogleUserProvider->UsersModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUsersModule -->\n\nFindOneUserByEmailProvider->UsersModule\n\n\n\n\n\nFindOneUserByFacebookIdProvider\n\nFindOneUserByFacebookIdProvider\n\nUsersModule -->\n\nFindOneUserByFacebookIdProvider->UsersModule\n\n\n\n\n\nFindOneUserByGoogleIdProvider\n\nFindOneUserByGoogleIdProvider\n\nUsersModule -->\n\nFindOneUserByGoogleIdProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    18 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    14 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.constants.ts)\n                        \n                        \n                            CurrentUserData   (src/.../current-user-data.decorator.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../auth.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...AuthTypes: AuthType[]) => SetMetadata(AUTH_TYPE_KEY, AuthTypes)\n                    \n                \n\n\n        \n    \n\n    src/auth/constants/auth.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/current-user-data.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CurrentUserData\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n\n    (field: keyof CurrentUser | undefined, ctx: ExecutionContext) => {\n\n        const request = ctx.switchToHttp().getRequest();\n\n        const user: CurrentUser = request[REQUEST_USER_KEY]\n\n        return field ? user?.[field] : user;\n    },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
